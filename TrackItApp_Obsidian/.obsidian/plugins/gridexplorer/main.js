/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GridExplorerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian15 = require("obsidian");

// src/GridView.ts
var import_obsidian12 = require("obsidian");
var import_obsidian13 = require("obsidian");

// src/FolderSelectionModal.ts
var import_obsidian = require("obsidian");

// src/translations.ts
function t(key) {
  const lang = window.localStorage.getItem("language");
  const translations = TRANSLATIONS[lang] || TRANSLATIONS["en"];
  return translations[key] || key;
}
var TRANSLATIONS = {
  "zh-TW": {
    // 通知訊息
    "bookmarks_plugin_disabled": "\u8ACB\u5148\u555F\u7528\u66F8\u7C64\u5916\u639B",
    // 按鈕和標籤
    "sorting": "\u6392\u5E8F\u65B9\u5F0F",
    "refresh": "\u91CD\u65B0\u6574\u7406",
    "reselect": "\u91CD\u65B0\u9078\u64C7\u4F4D\u7F6E",
    "go_up": "\u8FD4\u56DE\u4E0A\u5C64\u8CC7\u6599\u593E",
    "no_backlinks": "\u6C92\u6709\u53CD\u5411\u9023\u7D50",
    "search": "\u641C\u5C0B",
    "search_placeholder": "\u641C\u5C0B\u95DC\u9375\u5B57",
    "search_current_location_only": "\u50C5\u641C\u5C0B\u76EE\u524D\u4F4D\u7F6E",
    "search_media_files": "\u641C\u5C0B\u5A92\u9AD4\u6A94\u6848",
    "cancel": "\u53D6\u6D88",
    "new_note": "\u65B0\u589E\u7B46\u8A18",
    "new_folder": "\u65B0\u589E\u8CC7\u6599\u593E",
    "delete_folder": "\u522A\u9664\u8CC7\u6599\u593E",
    "untitled": "\u672A\u547D\u540D",
    "files": "\u500B\u6A94\u6848",
    "add": "\u65B0\u589E",
    // 視圖標題
    "grid_view_title": "\u7DB2\u683C\u8996\u5716",
    "bookmarks_mode": "\u66F8\u7C64",
    "folder_mode": "\u8CC7\u6599\u593E",
    "search_results": "\u641C\u5C0B\u7D50\u679C",
    "backlinks_mode": "\u53CD\u5411\u9023\u7D50",
    "all_files_mode": "\u6240\u6709\u6A94\u6848",
    "recent_files_mode": "\u6700\u8FD1\u6A94\u6848",
    "random_note_mode": "\u96A8\u6A5F\u7B46\u8A18",
    // 排序選項
    "sort_name_asc": "\u540D\u7A31 (A \u2192 Z)",
    "sort_name_desc": "\u540D\u7A31 (Z \u2192 A)",
    "sort_mtime_desc": "\u4FEE\u6539\u6642\u9593 (\u65B0 \u2192 \u820A)",
    "sort_mtime_asc": "\u4FEE\u6539\u6642\u9593 (\u820A \u2192 \u65B0)",
    "sort_ctime_desc": "\u5EFA\u7ACB\u6642\u9593 (\u65B0 \u2192 \u820A)",
    "sort_ctime_asc": "\u5EFA\u7ACB\u6642\u9593 (\u820A \u2192 \u65B0)",
    "sort_random": "\u96A8\u6A5F\u6392\u5E8F",
    // 設定
    "grid_view_settings": "\u7DB2\u683C\u8996\u5716\u8A2D\u5B9A",
    "media_files_settings": "\u5A92\u9AD4\u6A94\u6848\u8A2D\u5B9A",
    "show_media_files": "\u986F\u793A\u5A92\u9AD4\u6A94\u6848",
    "show_media_files_desc": "\u5728\u7DB2\u683C\u8996\u5716\u4E2D\u986F\u793A\u5A92\u9AD4\u6A94\u6848",
    "show_video_thumbnails": "\u986F\u793A\u5F71\u7247\u7E2E\u5716",
    "show_video_thumbnails_desc": "\u5728\u7DB2\u683C\u8996\u5716\u4E2D\u986F\u793A\u5F71\u7247\u7684\u7E2E\u5716\uFF0C\u95DC\u9589\u6642\u5C07\u986F\u793A\u64AD\u653E\u5716\u793A",
    "show_note_tags": "\u986F\u793A\u7B46\u8A18\u6A19\u7C64",
    "show_note_tags_desc": "\u5728\u7DB2\u683C\u8996\u5716\u4E2D\u986F\u793A\u7B46\u8A18\u7684\u6A19\u7C64",
    "ignored_folders": "\u5FFD\u7565\u7684\u8CC7\u6599\u593E",
    "ignored_folders_desc": "\u5728\u9019\u88E1\u8A2D\u5B9A\u8981\u5FFD\u7565\u7684\u8CC7\u6599\u593E",
    "add_ignored_folder": "\u65B0\u589E\u5FFD\u7565\u8CC7\u6599\u593E",
    "no_ignored_folders": "\u6C92\u6709\u5FFD\u7565\u7684\u8CC7\u6599\u593E\u3002",
    "ignored_folder_patterns": "\u4EE5\u5B57\u4E32\u5FFD\u7565\u8CC7\u6599\u593E\u548C\u6A94\u6848",
    "ignored_folder_patterns_desc": "\u4F7F\u7528\u5B57\u4E32\u6A21\u5F0F\u5FFD\u7565\u8CC7\u6599\u593E\u548C\u6A94\u6848\uFF08\u652F\u63F4\u6B63\u5247\u8868\u9054\u5F0F\uFF09",
    "add_ignored_folder_pattern": "\u65B0\u589E\u5FFD\u7565\u8CC7\u6599\u593E\u6A21\u5F0F",
    "ignored_folder_pattern_placeholder": "\u8F38\u5165\u8CC7\u6599\u593E\u540D\u7A31\u6216\u6B63\u5247\u8868\u9054\u5F0F",
    "no_ignored_folder_patterns": "\u6C92\u6709\u5FFD\u7565\u7684\u8CC7\u6599\u593E\u6A21\u5F0F\u3002",
    "remove": "\u79FB\u9664",
    "default_sort_type": "\u9810\u8A2D\u6392\u5E8F\u6A21\u5F0F",
    "default_sort_type_desc": "\u8A2D\u5B9A\u958B\u555F\u7DB2\u683C\u8996\u5716\u6642\u7684\u9810\u8A2D\u6392\u5E8F\u6A21\u5F0F",
    "modified_date_field": '"\u4FEE\u6539\u6642\u9593"\u6B04\u4F4D\u540D\u7A31',
    "modified_date_field_desc": "\u6307\u5B9A frontmatter \u4E2D\u7528\u65BC\u7B46\u8A18\u4FEE\u6539\u6642\u9593\u7684\u6B04\u4F4D\u540D\u7A31",
    "created_date_field": '"\u5EFA\u7ACB\u6642\u9593"\u6B04\u4F4D\u540D\u7A31',
    "created_date_field_desc": "\u6307\u5B9A frontmatter \u4E2D\u7528\u65BC\u7B46\u8A18\u5EFA\u7ACB\u6642\u9593\u7684\u6B04\u4F4D\u540D\u7A31",
    "grid_item_width": "\u7DB2\u683C\u9805\u76EE\u5BEC\u5EA6",
    "grid_item_width_desc": "\u8A2D\u5B9A\u7DB2\u683C\u9805\u76EE\u7684\u5BEC\u5EA6",
    "grid_item_height": "\u7DB2\u683C\u9805\u76EE\u9AD8\u5EA6",
    "grid_item_height_desc": "\u8A2D\u5B9A\u7DB2\u683C\u9805\u76EE\u7684\u9AD8\u5EA6 (\u8A2D\u70BA0\u6642\u70BA\u81EA\u52D5\u8ABF\u6574)",
    "image_area_width": "\u5716\u7247\u5340\u57DF\u5BEC\u5EA6",
    "image_area_width_desc": "\u8A2D\u5B9A\u5716\u7247\u9810\u89BD\u5340\u57DF\u7684\u5BEC\u5EA6",
    "image_area_height": "\u5716\u7247\u5340\u57DF\u9AD8\u5EA6",
    "image_area_height_desc": "\u8A2D\u5B9A\u5716\u7247\u9810\u89BD\u5340\u57DF\u7684\u9AD8\u5EA6",
    "title_font_size": "\u6A19\u984C\u5B57\u9AD4\u5927\u5C0F",
    "title_font_size_desc": "\u8A2D\u5B9A\u6A19\u984C\u5B57\u9AD4\u7684\u5927\u5C0F",
    "summary_length": "\u6458\u8981\u9577\u5EA6",
    "summary_length_desc": "\u8A2D\u5B9A\u6458\u8981\u7684\u9577\u5EA6",
    "enable_file_watcher": "\u555F\u7528\u6A94\u6848\u76E3\u63A7",
    "enable_file_watcher_desc": "\u555F\u7528\u5F8C\u6703\u81EA\u52D5\u5075\u6E2C\u6A94\u6848\u8B8A\u66F4\u4E26\u66F4\u65B0\u8996\u5716\uFF0C\u95DC\u9589\u5F8C\u9700\u624B\u52D5\u9EDE\u64CA\u91CD\u65B0\u6574\u7406\u6309\u9215",
    "reset_to_default": "\u91CD\u7F6E\u70BA\u9810\u8A2D\u503C",
    "reset_to_default_desc": "\u5C07\u6240\u6709\u8A2D\u5B9A\u91CD\u7F6E\u70BA\u9810\u8A2D\u503C",
    "settings_reset_notice": "\u8A2D\u5B9A\u503C\u5DF2\u91CD\u7F6E\u70BA\u9810\u8A2D\u503C",
    "ignored_folders_settings": "\u5FFD\u7565\u8CC7\u6599\u593E\u8A2D\u5B9A",
    "display_mode_settings": "\u986F\u793A\u6A21\u5F0F\u8A2D\u5B9A",
    "show_bookmarks_mode": "\u986F\u793A\u66F8\u7C64\u6A21\u5F0F",
    "show_search_mode": "\u986F\u793A\u641C\u5C0B\u7D50\u679C\u6A21\u5F0F",
    "show_backlinks_mode": "\u986F\u793A\u53CD\u5411\u9023\u7D50\u6A21\u5F0F",
    "show_all_files_mode": "\u986F\u793A\u6240\u6709\u6A94\u6848\u6A21\u5F0F",
    "show_recent_files_mode": "\u986F\u793A\u6700\u8FD1\u6A94\u6848\u6A21\u5F0F",
    "recent_files_count": "\u6700\u8FD1\u6A94\u6848\u6A21\u5F0F\u986F\u793A\u7B46\u6578",
    "show_random_note_mode": "\u986F\u793A\u96A8\u6A5F\u7B46\u8A18\u6A21\u5F0F",
    "random_note_count": "\u96A8\u6A5F\u7B46\u8A18\u6A21\u5F0F\u986F\u793A\u7B46\u6578",
    "random_note_notes_only": "\u50C5\u7B46\u8A18",
    "random_note_include_media_files": "\u5305\u542B\u5A92\u9AD4\u6A94\u6848",
    // 顯示"返回上層資料夾"選項設定
    "show_parent_folder_item": "\u986F\u793A\u300C\u8FD4\u56DE\u4E0A\u5C64\u8CC7\u6599\u593E\u300D",
    "show_parent_folder_item_desc": "\u5728\u7DB2\u683C\u7684\u7B2C\u4E00\u9805\u986F\u793A\u300C\u8FD4\u56DE\u4E0A\u5C64\u8CC7\u6599\u593E\u300D\u9078\u9805",
    "parent_folder": "\u4E0A\u5C64\u8CC7\u6599\u593E",
    // 預設開啟位置設定
    "default_open_location": "\u9810\u8A2D\u958B\u555F\u4F4D\u7F6E",
    "default_open_location_desc": "\u8A2D\u5B9A\u7DB2\u683C\u8996\u5716\u9810\u8A2D\u958B\u555F\u7684\u4F4D\u7F6E",
    "open_in_left_sidebar": "\u958B\u5728\u5DE6\u5074\u908A\u6B04",
    "open_in_right_sidebar": "\u958B\u5728\u53F3\u5074\u908A\u6B04",
    "open_in_new_tab": "\u5728\u65B0\u5206\u9801\u958B\u555F",
    "reuse_existing_leaf": "\u91CD\u8907\u4F7F\u7528\u5DF2\u958B\u555F\u7684\u8996\u5716",
    "reuse_existing_leaf_desc": "\u958B\u555F\u7DB2\u683C\u8996\u5716\u6642\uFF0C\u512A\u5148\u4F7F\u7528\u5DF2\u958B\u555F\u7684\u8996\u5716\u800C\u975E\u5EFA\u7ACB\u65B0\u8996\u5716",
    "custom_document_extensions": "\u81EA\u8A02\u6587\u4EF6\u6A94\u6848\u526F\u6A94\u540D",
    "custom_document_extensions_desc": "\u984D\u5916\u7684\u6587\u4EF6\u526F\u6A94\u540D\uFF08\u7528\u9017\u865F\u5206\u9694\uFF0C\u4E0D\u542B\u9EDE\u865F\uFF09",
    "custom_document_extensions_placeholder": "\u4F8B\u5982\uFF1Atxt,doc,docx",
    // 選擇資料夾對話框
    "select_folders": "\u9078\u64C7\u8CC7\u6599\u593E",
    "open_grid_view": "\u958B\u555F\u7DB2\u683C\u8996\u5716",
    "open_in_grid_view": "\u5728\u7DB2\u683C\u8996\u5716\u4E2D\u958B\u555F",
    "open_note_in_grid_view": "\u5728\u7DB2\u683C\u8996\u5716\u4E2D\u958B\u555F\u7576\u524D\u7B46\u8A18",
    "open_backlinks_in_grid_view": "\u5728\u7DB2\u683C\u8996\u5716\u4E2D\u958B\u555F\u53CD\u5411\u9023\u7D50",
    "open_recent_files_in_grid_view": "\u5728\u6700\u8FD1\u6A94\u6848\u4E2D\u958B\u555F\u7576\u524D\u7B46\u8A18",
    "open_settings": "\u958B\u555F\u8A2D\u5B9A",
    "open_new_grid_view": "\u958B\u555F\u65B0\u7DB2\u683C\u8996\u5716",
    "delete_note": "\u522A\u9664\u6A94\u6848",
    "open_folder_note": "\u958B\u555F\u8CC7\u6599\u593E\u7B46\u8A18",
    "create_folder_note": "\u5EFA\u7ACB\u8CC7\u6599\u593E\u7B46\u8A18",
    "delete_folder_note": "\u522A\u9664\u8CC7\u6599\u593E\u7B46\u8A18",
    "edit_folder_note_settings": "\u7DE8\u8F2F\u8CC7\u6599\u593E\u7B46\u8A18\u8A2D\u5B9A",
    "ignore_folder": "\u5FFD\u7565\u6B64\u8CC7\u6599\u593E",
    "searching": "\u641C\u5C0B\u4E2D...",
    "no_files": "\u6C92\u6709\u627E\u5230\u4EFB\u4F55\u6A94\u6848",
    "filter_folders": "\u7BE9\u9078\u8CC7\u6599\u593E...",
    // 資料夾筆記設定對話框
    "folder_note_settings": "\u8CC7\u6599\u593E\u7B46\u8A18\u8A2D\u5B9A",
    "folder_sort_type": "\u8CC7\u6599\u593E\u6392\u5E8F\u65B9\u5F0F",
    "folder_sort_type_desc": "\u8A2D\u5B9A\u6B64\u8CC7\u6599\u593E\u7684\u9810\u8A2D\u6392\u5E8F\u65B9\u5F0F",
    "folder_color": "\u8CC7\u6599\u593E\u984F\u8272",
    "folder_color_desc": "\u8A2D\u5B9A\u6B64\u8CC7\u6599\u593E\u7684\u986F\u793A\u984F\u8272",
    "default_sort": "\u4F7F\u7528\u9810\u8A2D\u6392\u5E8F",
    "no_color": "\u7121\u984F\u8272",
    "color_red": "\u7D05\u8272",
    "color_orange": "\u6A59\u8272",
    "color_yellow": "\u9EC3\u8272",
    "color_green": "\u7DA0\u8272",
    "color_cyan": "\u9752\u8272",
    "color_blue": "\u85CD\u8272",
    "color_purple": "\u7D2B\u8272",
    "color_pink": "\u7C89\u8272",
    "confirm": "\u78BA\u8A8D",
    "note_color_settings": "\u7B46\u8A18\u984F\u8272\u8A2D\u5B9A",
    "note_color": "\u7B46\u8A18\u984F\u8272",
    "note_color_desc": "\u8A2D\u5B9A\u6B64\u7B46\u8A18\u7684\u986F\u793A\u984F\u8272",
    "set_note_color": "\u8A2D\u5B9A\u7B46\u8A18\u984F\u8272",
    "rename_folder": "\u91CD\u65B0\u547D\u540D\u8CC7\u6599\u593E",
    "enter_new_folder_name": "\u8F38\u5165\u65B0\u8CC7\u6599\u593E\u540D\u7A31",
    "search_selection_in_grid_view": "\u5728\u7DB2\u683C\u8996\u5716\u4E2D\u641C\u5C0B...",
    "show_date_dividers": "\u986F\u793A\u65E5\u671F\u5206\u9694\u5668",
    "show_date_dividers_desc": "\u5728\u65E5\u671F\u76F8\u95DC\u6392\u5E8F\u6642\uFF0C\u5728\u4E0D\u540C\u5929\u7684\u7B2C\u4E00\u7B46\u4E4B\u524D\u986F\u793A\u65E5\u671F\u5206\u9694\u5668",
    "date_divider_format": "\u65E5\u671F\u5206\u9694\u5668\u683C\u5F0F",
    "date_divider_mode": "\u65E5\u671F\u5206\u9694\u5668",
    "date_divider_mode_desc": "\u9078\u64C7\u65E5\u671F\u5206\u9694\u5668\u7684\u986F\u793A\u6A21\u5F0F",
    "date_divider_mode_none": "\u4E0D\u4F7F\u7528",
    "date_divider_mode_year": "\u5E74",
    "date_divider_mode_month": "\u6708",
    "date_divider_mode_day": "\u65E5"
  },
  "en": {
    // Notifications
    "bookmarks_plugin_disabled": "Please enable the Bookmarks plugin first",
    // Buttons and Labels
    "sorting": "Sort by",
    "refresh": "Refresh",
    "reselect": "Reselect",
    "go_up": "Go Up",
    "no_backlinks": "No backlinks",
    "search": "Search",
    "search_placeholder": "Search keyword",
    "search_current_location_only": "Search current location only",
    "search_media_files": "Search media files",
    "cancel": "Cancel",
    "new_note": "New note",
    "new_folder": "New folder",
    "delete_folder": "Delete folder",
    "untitled": "Untitled",
    "files": "files",
    "add": "Add",
    // View Titles
    "grid_view_title": "Grid view",
    "bookmarks_mode": "Bookmarks",
    "folder_mode": "Folder",
    "search_results": "Search results",
    "backlinks_mode": "Backlinks",
    "all_files_mode": "All files",
    "recent_files_mode": "Recent files",
    "random_note_mode": "Random note",
    // Sort Options
    "sort_name_asc": "Name (A \u2192 Z)",
    "sort_name_desc": "Name (Z \u2192 A)",
    "sort_mtime_desc": "Modified (New \u2192 Old)",
    "sort_mtime_asc": "Modified (Old \u2192 New)",
    "sort_ctime_desc": "Created (New \u2192 Old)",
    "sort_ctime_asc": "Created (Old \u2192 New)",
    "sort_random": "Random",
    // Settings
    "grid_view_settings": "Grid view settings",
    "media_files_settings": "Media files settings",
    "show_media_files": "Show media files",
    "show_media_files_desc": "Display media files in the grid view",
    "show_video_thumbnails": "Show video thumbnails",
    "show_video_thumbnails_desc": "Display thumbnails for videos in the grid view, shows a play icon when disabled",
    "show_note_tags": "Show note tags",
    "show_note_tags_desc": "Display tags for notes in the grid view",
    "ignored_folders": "Ignored folders",
    "ignored_folders_desc": "Set folders to ignore here",
    "add_ignored_folder": "Add ignored folder",
    "no_ignored_folders": "No ignored folders.",
    "ignored_folder_patterns": "Ignore folders and files by pattern",
    "ignored_folder_patterns_desc": "Use string patterns to ignore folders and files (supports regular expressions)",
    "add_ignored_folder_pattern": "Add folder pattern",
    "ignored_folder_pattern_placeholder": "Enter folder name or regex pattern",
    "no_ignored_folder_patterns": "No ignored folder patterns.",
    "remove": "Remove",
    "default_sort_type": "Default sort type",
    "default_sort_type_desc": "Set the default sorting method when opening Grid View",
    "modified_date_field": '"Modified date" field name',
    "modified_date_field_desc": "Set the field name in frontmatter to use for the modified date",
    "created_date_field": '"Created date" field name',
    "created_date_field_desc": "Set the field name in frontmatter to use for the created date",
    "grid_item_width": "Grid item width",
    "grid_item_width_desc": "Set the width of grid items",
    "grid_item_height": "Grid item height",
    "grid_item_height_desc": "Set the height of grid items (set to 0 to automatically adjust)",
    "image_area_width": "Image area width",
    "image_area_width_desc": "Set the width of the image preview area",
    "image_area_height": "Image area height",
    "image_area_height_desc": "Set the height of the image preview area",
    "title_font_size": "Title font size",
    "title_font_size_desc": "Set the size of the title font",
    "summary_length": "Summary length",
    "summary_length_desc": "Set the length of the summary",
    "enable_file_watcher": "Enable file watcher",
    "enable_file_watcher_desc": "When enabled, the view will automatically update when files change. If disabled, you need to click the refresh button manually",
    "reset_to_default": "Reset to default",
    "reset_to_default_desc": "Reset all settings to default values",
    "settings_reset_notice": "Settings have been reset to default values",
    "ignored_folders_settings": "Ignore folders settings",
    "display_mode_settings": "Display mode settings",
    "show_bookmarks_mode": "Show bookmarks mode",
    "show_search_mode": "Show search results mode",
    "show_backlinks_mode": "Show backlinks mode",
    "show_all_files_mode": "Show all files mode",
    "show_recent_files_mode": "Show recent files mode",
    "recent_files_count": "Recent files count",
    "show_random_note_mode": "Show random note mode",
    "random_note_count": "Random note count",
    "random_note_notes_only": "Notes Only",
    "random_note_include_media_files": "Include Media Files",
    // Show "Parent Folder" option setting
    "show_parent_folder_item": 'Show "Parent Folder" item',
    "show_parent_folder_item_desc": 'Show a "Parent Folder" item as the first item in the grid',
    "parent_folder": "Parent Folder",
    // Default open location setting
    "default_open_location": "Default open location",
    "default_open_location_desc": "Set the default location to open the grid view",
    "open_in_left_sidebar": "Open in left sidebar",
    "open_in_right_sidebar": "Open in right sidebar",
    "open_in_new_tab": "Open in new tab",
    "reuse_existing_leaf": "Reuse existing view",
    "reuse_existing_leaf_desc": "When opening Grid View, prioritize using an existing view instead of creating a new one",
    "custom_document_extensions": "Custom Document Extensions",
    "custom_document_extensions_desc": "Additional document extensions (comma-separated, without dots)",
    "custom_document_extensions_placeholder": "e.g., txt,doc,docx",
    // Select Folder Dialog
    "select_folders": "Select folder",
    "open_grid_view": "Open grid view",
    "open_in_grid_view": "Open in grid view",
    "open_note_in_grid_view": "Open note in grid view",
    "open_backlinks_in_grid_view": "Open backlinks in grid view",
    "open_recent_files_in_grid_view": "Open current note in recent files",
    "open_settings": "Open settings",
    "open_new_grid_view": "Open new grid view",
    "delete_note": "Delete file",
    "open_folder_note": "Open folder note",
    "create_folder_note": "Create folder note",
    "delete_folder_note": "Delete folder note",
    "edit_folder_note_settings": "Edit folder note settings",
    "ignore_folder": "Ignore this folder",
    "searching": "Searching...",
    "no_files": "No files found",
    "filter_folders": "Filter folders...",
    // Folder Note Settings Dialog
    "folder_note_settings": "Folder Note Settings",
    "folder_sort_type": "Folder Sort Type",
    "folder_sort_type_desc": "Set the default sort type for this folder",
    "folder_color": "Folder Color",
    "folder_color_desc": "Set the display color for this folder",
    "default_sort": "Use Default Sort",
    "no_color": "No Color",
    "color_red": "Red",
    "color_orange": "Orange",
    "color_yellow": "Yellow",
    "color_green": "Green",
    "color_cyan": "Cyan",
    "color_blue": "Blue",
    "color_purple": "Purple",
    "color_pink": "Pink",
    "confirm": "Confirm",
    "note_color_settings": "Note color settings",
    "note_color": "Note color",
    "note_color_desc": "Set the display color for this note",
    "set_note_color": "Set note color",
    "rename_folder": "Rename folder",
    "enter_new_folder_name": "Enter new folder name",
    "search_selection_in_grid_view": "Search ... in grid view",
    "show_date_dividers": "Show date dividers",
    "show_date_dividers_desc": "Show date dividers before the first item of each different day when using date-related sorting",
    "date_divider_format": "Date divider format",
    "date_divider_mode": "Date divider",
    "date_divider_mode_desc": "Select the display mode for date dividers",
    "date_divider_mode_none": "None",
    "date_divider_mode_year": "Year",
    "date_divider_mode_month": "Month",
    "date_divider_mode_day": "Day"
  },
  "zh": {
    // 通知信息
    "bookmarks_plugin_disabled": "\u8BF7\u5148\u542F\u7528\u4E66\u7B7E\u63D2\u4EF6",
    // 按钮和标签
    "sorting": "\u6392\u5E8F\u65B9\u5F0F",
    "refresh": "\u5237\u65B0",
    "reselect": "\u91CD\u65B0\u9009\u62E9\u4F4D\u7F6E",
    "go_up": "\u8FD4\u56DE\u4E0A\u7EA7\u6587\u4EF6\u5939",
    "no_backlinks": "\u6CA1\u6709\u53CD\u5411\u94FE\u63A5",
    "search": "\u641C\u7D22",
    "search_placeholder": "\u641C\u7D22\u5173\u952E\u5B57",
    "search_current_location_only": "\u4EC5\u641C\u7D22\u5F53\u524D\u4F4D\u7F6E",
    "search_media_files": "\u641C\u7D22\u5A92\u4F53\u6587\u4EF6",
    "cancel": "\u53D6\u6D88",
    "new_note": "\u65B0\u5EFA\u7B14\u8BB0",
    "new_folder": "\u65B0\u5EFA\u6587\u4EF6\u5939",
    "delete_folder": "\u5220\u9664\u6587\u4EF6\u5939",
    "untitled": "\u672A\u547D\u540D",
    "files": "\u4E2A\u6587\u4EF6",
    "add": "\u6DFB\u52A0",
    // 视图标题
    "grid_view_title": "\u7F51\u683C\u89C6\u56FE",
    "bookmarks_mode": "\u4E66\u7B7E",
    "folder_mode": "\u6587\u4EF6\u5939",
    "search_results": "\u641C\u7D22\u7ED3\u679C",
    "backlinks_mode": "\u53CD\u5411\u94FE\u63A5",
    "all_files_mode": "\u6240\u6709\u6587\u4EF6",
    "recent_files_mode": "\u6700\u8FD1\u6587\u4EF6",
    "random_note_mode": "\u968F\u673A\u7B14\u8BB0",
    // 排序选项
    "sort_name_asc": "\u540D\u79F0 (A \u2192 Z)",
    "sort_name_desc": "\u540D\u79F0 (Z \u2192 A)",
    "sort_mtime_desc": "\u4FEE\u6539\u65F6\u95F4 (\u65B0 \u2192 \u65E7)",
    "sort_mtime_asc": "\u4FEE\u6539\u65F6\u95F4 (\u65E7 \u2192 \u65B0)",
    "sort_ctime_desc": "\u521B\u5EFA\u65F6\u95F4 (\u65B0 \u2192 \u65E7)",
    "sort_ctime_asc": "\u521B\u5EFA\u65F6\u95F4 (\u65E7 \u2192 \u65B0)",
    "sort_random": "\u968F\u673A\u6392\u5E8F",
    // 设置
    "grid_view_settings": "\u7F51\u683C\u89C6\u56FE\u8BBE\u7F6E",
    "media_files_settings": "\u5A92\u4F53\u6587\u4EF6\u8BBE\u7F6E",
    "show_media_files": "\u663E\u793A\u5A92\u4F53\u6587\u4EF6",
    "show_media_files_desc": "\u5728\u7F51\u683C\u89C6\u56FE\u4E2D\u663E\u793A\u5A92\u4F53\u6587\u4EF6",
    "show_video_thumbnails": "\u663E\u793A\u89C6\u9891\u7F29\u7565\u56FE",
    "show_video_thumbnails_desc": "\u5728\u7F51\u683C\u89C6\u56FE\u4E2D\u663E\u793A\u89C6\u9891\u7684\u7F29\u7565\u56FE\uFF0C\u5173\u95ED\u65F6\u5C06\u663E\u793A\u64AD\u653E\u56FE\u6807",
    "show_note_tags": "\u663E\u793A\u7B14\u8BB0\u6807\u7B7E",
    "show_note_tags_desc": "\u5728\u7F51\u683C\u89C6\u56FE\u4E2D\u663E\u793A\u7B14\u8BB0\u7684\u6807\u7B7E",
    "ignored_folders": "\u5FFD\u7565\u7684\u6587\u4EF6\u5939",
    "ignored_folders_desc": "\u5728\u8FD9\u91CC\u8BBE\u7F6E\u8981\u5FFD\u7565\u7684\u6587\u4EF6\u5939",
    "add_ignored_folder": "\u6DFB\u52A0\u5FFD\u7565\u6587\u4EF6\u5939",
    "no_ignored_folders": "\u6CA1\u6709\u5FFD\u7565\u7684\u6587\u4EF6\u5939\u3002",
    "ignored_folder_patterns": "\u4EE5\u5B57\u7B26\u4E32\u5FFD\u7565\u6587\u4EF6\u5939\u548C\u6587\u4EF6",
    "ignored_folder_patterns_desc": "\u4F7F\u7528\u5B57\u7B26\u4E32\u6A21\u5F0F\u5FFD\u7565\u6587\u4EF6\u5939\u548C\u6587\u4EF6\uFF08\u652F\u6301\u6B63\u5219\u8868\u8FBE\u5F0F\uFF09",
    "add_ignored_folder_pattern": "\u6DFB\u52A0\u5FFD\u7565\u6587\u4EF6\u5939\u6A21\u5F0F",
    "ignored_folder_pattern_placeholder": "\u8F93\u5165\u6587\u4EF6\u5939\u540D\u79F0\u6216\u6B63\u5219\u8868\u8FBE\u5F0F",
    "no_ignored_folder_patterns": "\u6CA1\u6709\u5FFD\u7565\u7684\u6587\u4EF6\u5939\u6A21\u5F0F\u3002",
    "remove": "\u79FB\u9664",
    "default_sort_type": "\u9ED8\u8BA4\u6392\u5E8F\u6A21\u5F0F",
    "default_sort_type_desc": "\u8BBE\u7F6E\u6253\u5F00\u7F51\u683C\u89C6\u56FE\u65F6\u7684\u9ED8\u8BA4\u6392\u5E8F\u6A21\u5F0F",
    "modified_date_field": '"\u4FEE\u6539\u65F6\u95F4"\u5B57\u6BB5\u540D\u79F0',
    "modified_date_field_desc": "\u8BBE\u7F6E frontmatter \u4E2D\u7528\u4E8E\u7B14\u8BB0\u4FEE\u6539\u65F6\u95F4\u7684\u5B57\u6BB5\u540D\u79F0",
    "created_date_field": '"\u521B\u5EFA\u65F6\u95F4"\u5B57\u6BB5\u540D\u79F0',
    "created_date_field_desc": "\u8BBE\u7F6E frontmatter \u4E2D\u7528\u4E8E\u7B14\u8BB0\u521B\u5EFA\u65F6\u95F4\u7684\u5B57\u6BB5\u540D\u79F0",
    "grid_item_width": "\u7F51\u683C\u9879\u76EE\u5BBD\u5EA6",
    "grid_item_width_desc": "\u8BBE\u7F6E\u7F51\u683C\u9879\u76EE\u7684\u5BBD\u5EA6",
    "grid_item_height": "\u7F51\u683C\u9879\u76EE\u9AD8\u5EA6",
    "grid_item_height_desc": "\u8BBE\u7F6E\u7F51\u683C\u9879\u76EE\u7684\u9AD8\u5EA6 (\u8BBE\u4E3A0\u65F6\u4E3A\u81EA\u52A8\u8C03\u6574)",
    "image_area_width": "\u56FE\u7247\u533A\u57DF\u5BBD\u5EA6",
    "image_area_width_desc": "\u8BBE\u7F6E\u56FE\u7247\u9884\u89C8\u533A\u57DF\u7684\u5BBD\u5EA6",
    "image_area_height": "\u56FE\u7247\u533A\u57DF\u9AD8\u5EA6",
    "image_area_height_desc": "\u8BBE\u7F6E\u56FE\u7247\u9884\u89C8\u533A\u57DF\u7684\u9AD8\u5EA6",
    "title_font_size": "\u6807\u9898\u5B57\u4F53\u5927\u5C0F",
    "title_font_size_desc": "\u8BBE\u7F6E\u6807\u9898\u5B57\u4F53\u7684\u5927\u5C0F",
    "summary_length": "\u6458\u8981\u957F\u5EA6",
    "summary_length_desc": "\u8BBE\u7F6E\u6458\u8981\u7684\u957F\u5EA6",
    "enable_file_watcher": "\u542F\u7528\u6587\u4EF6\u76D1\u63A7",
    "enable_file_watcher_desc": "\u542F\u7528\u540E\u4F1A\u81EA\u52A8\u68C0\u6D4B\u6587\u4EF6\u53D8\u66F4\u5E76\u66F4\u65B0\u89C6\u56FE\uFF0C\u5173\u95ED\u540E\u9700\u624B\u52A8\u70B9\u51FB\u5237\u65B0\u6309\u94AE",
    "reset_to_default": "\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u503C",
    "reset_to_default_desc": "\u5C06\u6240\u6709\u8BBE\u7F6E\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u503C",
    "settings_reset_notice": "\u8BBE\u7F6E\u503C\u5DF2\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u503C",
    "ignored_folders_settings": "\u5FFD\u7565\u6587\u4EF6\u5939\u8BBE\u7F6E",
    "display_mode_settings": "\u663E\u793A\u6A21\u5F0F\u8BBE\u7F6E",
    "show_bookmarks_mode": "\u663E\u793A\u4E66\u7B7E\u6A21\u5F0F",
    "show_search_mode": "\u663E\u793A\u641C\u7D22\u7ED3\u679C\u6A21\u5F0F",
    "show_backlinks_mode": "\u663E\u793A\u53CD\u5411\u94FE\u63A5\u6A21\u5F0F",
    "show_all_files_mode": "\u663E\u793A\u6240\u6709\u6587\u4EF6\u6A21\u5F0F",
    "show_recent_files_mode": "\u663E\u793A\u6700\u8FD1\u6587\u4EF6\u6A21\u5F0F",
    "recent_files_count": "\u6700\u8FD1\u6587\u4EF6\u6A21\u5F0F\u663E\u793A\u7B14\u6570",
    "show_random_note_mode": "\u663E\u793A\u968F\u673A\u7B14\u8BB0\u6A21\u5F0F",
    "random_note_count": "\u968F\u673A\u7B14\u8BB0\u6A21\u5F0F\u663E\u793A\u7B14\u6570",
    "random_note_notes_only": "\u4EC5\u7B14\u8BB0",
    "random_note_include_media_files": "\u5305\u542B\u5A92\u4F53\u6587\u4EF6",
    // 显示"返回上级文件夹"选项设置
    "show_parent_folder_item": "\u663E\u793A\u300C\u8FD4\u56DE\u4E0A\u7EA7\u6587\u4EF6\u5939\u300D",
    "show_parent_folder_item_desc": "\u5728\u7F51\u683C\u7684\u7B2C\u4E00\u9879\u663E\u793A\u300C\u8FD4\u56DE\u4E0A\u7EA7\u6587\u4EF6\u5939\u300D\u9009\u9879",
    "parent_folder": "\u4E0A\u7EA7\u6587\u4EF6\u5939",
    // 默认打开位置设置
    "default_open_location": "\u9ED8\u8BA4\u6253\u5F00\u4F4D\u7F6E",
    "default_open_location_desc": "\u8BBE\u7F6E\u7F51\u683C\u89C6\u56FE\u9ED8\u8BA4\u6253\u5F00\u7684\u4F4D\u7F6E",
    "open_in_left_sidebar": "\u5728\u5DE6\u4FA7\u8FB9\u680F\u6253\u5F00",
    "open_in_right_sidebar": "\u5728\u53F3\u4FA7\u8FB9\u680F\u6253\u5F00",
    "open_in_new_tab": "\u5728\u65B0\u6807\u7B7E\u9875\u6253\u5F00",
    "reuse_existing_leaf": "\u91CD\u590D\u4F7F\u7528\u5DF2\u6253\u5F00\u7684\u89C6\u56FE",
    "reuse_existing_leaf_desc": "\u6253\u5F00\u7F51\u683C\u89C6\u56FE\u65F6\uFF0C\u4F18\u5148\u4F7F\u7528\u5DF2\u6253\u5F00\u7684\u89C6\u56FE\u800C\u975E\u521B\u5EFA\u65B0\u89C6\u56FE",
    "custom_document_extensions": "\u81EA\u5B9A\u4E49\u6587\u4EF6\u6269\u5C55\u540D",
    "custom_document_extensions_desc": "\u989D\u5916\u7684\u6587\u4EF6\u6269\u5C55\u540D\uFF08\u7528\u9017\u53F7\u5206\u9694\uFF0C\u4E0D\u542B\u70B9\u53F7\uFF09",
    "custom_document_extensions_placeholder": "\u4F8B\u5982\uFF1Atxt,doc,docx",
    // 选择文件夹对话框
    "select_folders": "\u9009\u62E9\u6587\u4EF6\u5939",
    "open_grid_view": "\u6253\u5F00\u7F51\u683C\u89C6\u56FE",
    "open_in_grid_view": "\u5728\u7F51\u683C\u89C6\u56FE\u4E2D\u6253\u5F00",
    "open_note_in_grid_view": "\u5728\u7F51\u683C\u89C6\u56FE\u4E2D\u6253\u5F00\u5F53\u524D\u7B14\u8BB0",
    "open_backlinks_in_grid_view": "\u5728\u7F51\u683C\u89C6\u56FE\u4E2D\u6253\u5F00\u53CD\u5411\u94FE\u63A5",
    "open_recent_files_in_grid_view": "\u5728\u6700\u8FD1\u6587\u4EF6\u4E2D\u6253\u5F00\u5F53\u524D\u7B14\u8BB0",
    "open_settings": "\u6253\u5F00\u8BBE\u7F6E",
    "open_new_grid_view": "\u6253\u5F00\u65B0\u7F51\u683C\u89C6\u56FE",
    "delete_note": "\u5220\u9664\u6587\u4EF6",
    "open_folder_note": "\u6253\u5F00\u6587\u4EF6\u5939\u7B14\u8BB0",
    "create_folder_note": "\u521B\u5EFA\u6587\u4EF6\u5939\u7B14\u8BB0",
    "delete_folder_note": "\u5220\u9664\u6587\u4EF6\u5939\u7B14\u8BB0",
    "edit_folder_note_settings": "\u7F16\u8F91\u6587\u4EF6\u5939\u7B14\u8BB0\u8BBE\u7F6E",
    "ignore_folder": "\u5FFD\u7565\u6B64\u6587\u4EF6\u5939",
    "searching": "\u641C\u7D22\u4E2D...",
    "no_files": "\u6CA1\u6709\u627E\u5230\u4EFB\u4F55\u6587\u4EF6",
    "filter_folders": "\u7B5B\u9009\u6587\u4EF6\u5939...",
    // 文件夹笔记设置对话框
    "folder_note_settings": "\u6587\u4EF6\u5939\u7B14\u8BB0\u8BBE\u7F6E",
    "folder_sort_type": "\u6587\u4EF6\u5939\u6392\u5E8F\u65B9\u5F0F",
    "folder_sort_type_desc": "\u8BBE\u7F6E\u6B64\u6587\u4EF6\u5939\u7684\u9ED8\u8BA4\u6392\u5E8F\u65B9\u5F0F",
    "folder_color": "\u6587\u4EF6\u5939\u989C\u8272",
    "folder_color_desc": "\u8BBE\u7F6E\u6B64\u6587\u4EF6\u5939\u7684\u663E\u793A\u989C\u8272",
    "default_sort": "\u4F7F\u7528\u9ED8\u8BA4\u6392\u5E8F",
    "no_color": "\u65E0\u989C\u8272",
    "color_red": "\u7EA2\u8272",
    "color_orange": "\u6A59\u8272",
    "color_yellow": "\u9EC4\u8272",
    "color_green": "\u7EFF\u8272",
    "color_cyan": "\u9752\u8272",
    "color_blue": "\u84DD\u8272",
    "color_purple": "\u7D2B\u8272",
    "color_pink": "\u7C89\u8272",
    "confirm": "\u786E\u8BA4",
    "note_color_settings": "\u7B14\u8BB0\u989C\u8272\u8BBE\u7F6E",
    "note_color": "\u7B14\u8BB0\u989C\u8272",
    "note_color_desc": "\u8BBE\u7F6E\u6B64\u7B14\u8BB0\u7684\u663E\u793A\u989C\u8272",
    "set_note_color": "\u8BBE\u7F6E\u7B14\u8BB0\u989C\u8272",
    "rename_folder": "\u91CD\u65B0\u547D\u540D\u6587\u4EF6\u5939",
    "enter_new_folder_name": "\u8F93\u5165\u65B0\u6587\u4EF6\u5939\u540D\u79F0",
    "search_selection_in_grid_view": "\u5728\u7F51\u683C\u89C6\u56FE\u4E2D\u641C\u5BFB...",
    "show_date_dividers": "\u663E\u793A\u65E5\u671F\u5206\u9694\u5668",
    "show_date_dividers_desc": "\u5728\u65E5\u671F\u76F8\u5173\u6392\u5E8F\u65F6\uFF0C\u5728\u4E0D\u540C\u5929\u7684\u7B2C\u4E00\u6761\u4E4B\u524D\u663E\u793A\u65E5\u671F\u5206\u9694\u5668",
    "date_divider_format": "\u65E5\u671F\u5206\u9694\u5668\u683C\u5F0F",
    "date_divider_mode": "\u65E5\u671F\u5206\u9694\u5668",
    "date_divider_mode_desc": "\u9009\u62E9\u65E5\u671F\u5206\u9694\u5668\u7684\u663E\u793A\u6A21\u5F0F",
    "date_divider_mode_none": "\u4E0D\u4F7F\u7528",
    "date_divider_mode_year": "\u5E74",
    "date_divider_mode_month": "\u6708",
    "date_divider_mode_day": "\u65E5"
  },
  "ja": {
    // 通知メッジ
    "bookmarks_plugin_disabled": "\u30D6\u30C3\u30AF\u30DE\u30FC\u30AF\u30D7\u30E9\u30B0\u30A4\u30F3\u3092\u6709\u52B9\u306B\u3057\u3066\u304F\u3060\u3055\u3044",
    // ボタンとラベル
    "sorting": "\u4E26\u3073\u66FF\u3048",
    "refresh": "\u66F4\u65B0",
    "reselect": "\u518D\u9078\u629E",
    "go_up": "\u4E0A\u306E\u968E\u5C64\u3078",
    "no_backlinks": "\u30D0\u30C3\u30AF\u30EA\u30F3\u30AF\u306A\u3057",
    "search": "\u691C\u7D22",
    "search_placeholder": "\u30AD\u30FC\u30EF\u30FC\u30C9\u691C\u7D22",
    "search_current_location_only": "\u73FE\u5728\u306E\u5834\u6240\u306E\u307F\u691C\u7D22",
    "search_media_files": "\u30E1\u30C7\u30A3\u30A2\u30D5\u30A1\u30A4\u30EB\u3092\u691C\u7D22",
    "cancel": "\u30AD\u30E3\u30F3\u30BB\u30EB",
    "new_note": "\u65B0\u898F\u30CE\u30FC\u30C8",
    "new_folder": "\u65B0\u898F\u30D5\u30A9\u30EB\u30C0",
    "delete_folder": "\u524A\u9664\u30D5\u30A9\u30EB\u30C0",
    "untitled": "\u7121\u984C",
    "files": "\u30D5\u30A1\u30A4\u30EB",
    "add": "\u8FFD\u52A0",
    // ビュータイトル
    "grid_view_title": "\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC",
    "bookmarks_mode": "\u30D6\u30C3\u30AF\u30DE\u30FC\u30AF",
    "folder_mode": "\u30D5\u30A9\u30EB\u30C0",
    "search_results": "\u691C\u7D22\u7D50\u679C",
    "backlinks_mode": "\u30D0\u30C3\u30AF\u30EA\u30F3\u30AF",
    "all_files_mode": "\u3059\u3079\u3066\u306E\u30D5\u30A1\u30A4\u30EB",
    "recent_files_mode": "\u6700\u8FD1\u306E\u30D5\u30A1\u30A4\u30EB",
    "random_note_mode": "\u30E9\u30F3\u30C0\u30E0\u30CE\u30FC\u30C8",
    // 並べ替えオプション
    "sort_name_asc": "\u540D\u524D (A \u2192 Z)",
    "sort_name_desc": "\u540D\u524D (Z \u2192 A)",
    "sort_mtime_desc": "\u66F4\u65B0\u65E5\u6642 (\u65B0 \u2192 \u53E4)",
    "sort_mtime_asc": "\u66F4\u65B0\u65E5\u6642 (\u53E4 \u2192 \u65B0)",
    "sort_ctime_desc": "\u4F5C\u6210\u65E5\u6642 (\u65B0 \u2192 \u53E4)",
    "sort_ctime_asc": "\u4F5C\u6210\u65E5\u6642 (\u53E4 \u2192 \u65B0)",
    "sort_random": "\u30E9\u30F3\u30C0\u30E0",
    // 設定
    "grid_view_settings": "\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC\u8A2D\u5B9A",
    "media_files_settings": "\u30E1\u30C7\u30A3\u30A2\u30D5\u30A1\u30A4\u30EB\u8A2D\u5B9A",
    "show_media_files": "\u30E1\u30C7\u30A3\u30A2\u30D5\u30A1\u30A4\u30EB\u3092\u8868\u793A",
    "show_media_files_desc": "\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC\u3067\u30E1\u30C7\u30A3\u30A2\u30D5\u30A1\u30A4\u30EB\u3092\u8868\u793A\u3059\u308B",
    "show_video_thumbnails": "\u52D5\u753B\u306E\u30B5\u30E0\u30CD\u30A4\u30EB\u3092\u8868\u793A",
    "show_video_thumbnails_desc": "\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC\u3067\u52D5\u753B\u306E\u30B5\u30E0\u30CD\u30A4\u30EB\u3092\u8868\u793A\u3059\u308B\u3001\u7121\u52B9\u306E\u5834\u5408\u306F\u518D\u751F\u30A2\u30A4\u30B3\u30F3\u3092\u8868\u793A",
    "show_note_tags": "\u30CE\u30FC\u30C8\u306E\u30BF\u30B0\u3092\u8868\u793A",
    "show_note_tags_desc": "\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC\u3067\u30CE\u30FC\u30C8\u306E\u30BF\u30B0\u3092\u8868\u793A\u3059\u308B",
    "ignored_folders": "\u7121\u8996\u3059\u308B\u30D5\u30A9\u30EB\u30C0",
    "ignored_folders_desc": "\u7121\u8996\u3059\u308B\u30D5\u30A9\u30EB\u30C0\u3092\u8A2D\u5B9A\u3059\u308B",
    "add_ignored_folder": "\u7121\u8996\u3059\u308B\u30D5\u30A9\u30EB\u30C0\u3092\u8FFD\u52A0",
    "no_ignored_folders": "\u7121\u8996\u3059\u308B\u30D5\u30A9\u30EB\u30C0\u306F\u3042\u308A\u307E\u305B\u3093\u3002",
    "ignored_folder_patterns": "\u30D1\u30BF\u30FC\u30F3\u3067\u30D5\u30A9\u30EB\u30C0\u3068\u30D5\u30A1\u30A4\u30EB\u3092\u7121\u8996",
    "ignored_folder_patterns_desc": "\u6587\u5B57\u5217\u30D1\u30BF\u30FC\u30F3\u3092\u4F7F\u7528\u3057\u3066\u30D5\u30A9\u30EB\u30C0\u3068\u30D5\u30A1\u30A4\u30EB\u3092\u7121\u8996\u3059\u308B\uFF08\u6B63\u898F\u8868\u73FE\u3092\u30B5\u30DD\u30FC\u30C8\uFF09",
    "add_ignored_folder_pattern": "\u30D5\u30A9\u30EB\u30C0\u30D1\u30BF\u30FC\u30F3\u3092\u8FFD\u52A0",
    "ignored_folder_pattern_placeholder": "\u30D5\u30A9\u30EB\u30C0\u540D\u307E\u305F\u306F\u6B63\u898F\u8868\u73FE\u30D1\u30BF\u30FC\u30F3\u3092\u5165\u529B",
    "no_ignored_folder_patterns": "\u7121\u8996\u3059\u308B\u30D5\u30A9\u30EB\u30C0\u30D1\u30BF\u30FC\u30F3\u306F\u3042\u308A\u307E\u305B\u3093\u3002",
    "remove": "\u524A\u9664",
    "default_sort_type": "\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u4E26\u3073\u66FF\u3048",
    "default_sort_type_desc": "\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC\u3092\u958B\u3044\u305F\u3068\u304D\u306E\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u4E26\u3073\u66FF\u3048\u65B9\u6CD5\u3092\u8A2D\u5B9A",
    "modified_date_field": '"\u66F4\u65B0\u65E5"\u30D5\u30A3\u30FC\u30EB\u30C9\u540D',
    "modified_date_field_desc": "frontmatter\u3067\u66F4\u65B0\u65E5\u3068\u3057\u3066\u4F7F\u7528\u3059\u308B\u30D5\u30A3\u30FC\u30EB\u30C9\u540D\u3092\u8A2D\u5B9A",
    "created_date_field": '"\u4F5C\u6210\u65E5"\u30D5\u30A3\u30FC\u30EB\u30C9\u540D',
    "created_date_field_desc": "frontmatter\u3067\u4F5C\u6210\u65E5\u3068\u3057\u3066\u4F7F\u7528\u3059\u308B\u30D5\u30A3\u30FC\u30EB\u30C9\u540D\u3092\u8A2D\u5B9A",
    "grid_item_width": "\u30B0\u30EA\u30C3\u30C9\u30A2\u30A4\u30C6\u30E0\u306E\u5E45",
    "grid_item_width_desc": "\u30B0\u30EA\u30C3\u30C9\u30A2\u30A4\u30C6\u30E0\u306E\u5E45\u3092\u8A2D\u5B9A",
    "grid_item_height": "\u30B0\u30EA\u30C3\u30C9\u30A2\u30A4\u30C6\u30E0\u306E\u9AD8\u3055",
    "grid_item_height_desc": "\u30B0\u30EA\u30C3\u30C9\u30A2\u30A4\u30C6\u30E0\u306E\u9AD8\u3055\u3092\u8A2D\u5B9A\uFF080\u306B\u8A2D\u5B9A\u3059\u308B\u3068\u81EA\u52D5\u8ABF\u6574\uFF09",
    "image_area_width": "\u753B\u50CF\u30A8\u30EA\u30A2\u306E\u5E45",
    "image_area_width_desc": "\u753B\u50CF\u30D7\u30EC\u30D3\u30E5\u30FC\u30A8\u30EA\u30A2\u306E\u5E45\u3092\u8A2D\u5B9A",
    "image_area_height": "\u753B\u50CF\u30A8\u30EA\u30A2\u306E\u9AD8\u3055",
    "image_area_height_desc": "\u753B\u50CF\u30D7\u30EC\u30D3\u30E5\u30FC\u30A8\u30EA\u30A2\u306E\u9AD8\u3055\u3092\u8A2D\u5B9A",
    "title_font_size": "\u30BF\u30A4\u30C8\u30EB\u306E\u30D5\u30A9\u30F3\u30C8\u30B5\u30A4\u30BA",
    "title_font_size_desc": "\u30BF\u30A4\u30C8\u30EB\u306E\u30D5\u30A9\u30F3\u30C8\u30B5\u30A4\u30BA\u3092\u8A2D\u5B9A",
    "summary_length": "\u8981\u7D04\u306E\u9577\u3055",
    "summary_length_desc": "\u8981\u7D04\u306E\u9577\u3055\u3092\u8A2D\u5B9A",
    "enable_file_watcher": "\u30D5\u30A1\u30A4\u30EB\u76E3\u8996\u3092\u6709\u52B9\u306B\u3059\u308B",
    "enable_file_watcher_desc": "\u6709\u52B9\u306B\u3059\u308B\u3068\u3001\u30D5\u30A1\u30A4\u30EB\u306E\u5909\u66F4\u3092\u81EA\u52D5\u7684\u306B\u691C\u51FA\u3057\u3066\u30D3\u30E5\u30FC\u3092\u66F4\u65B0\u3057\u307E\u3059\u3002\u7121\u52B9\u306E\u5834\u5408\u306F\u3001\u66F4\u65B0\u30DC\u30BF\u30F3\u3092\u624B\u52D5\u3067\u30AF\u30EA\u30C3\u30AF\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059",
    "reset_to_default": "\u30C7\u30D5\u30A9\u30EB\u30C8\u306B\u623B\u3059",
    "reset_to_default_desc": "\u3059\u3079\u3066\u306E\u8A2D\u5B9A\u3092\u30C7\u30D5\u30A9\u30EB\u30C8\u5024\u306B\u623B",
    "settings_reset_notice": "\u8A2D\u5B9A\u5024\u304C\u30C7\u30D5\u30A9\u30EB\u30C8\u5024\u306B\u30EA\u30BB\u30C3\u30C8\u3055\u308C\u307E\u3057\u305F",
    "ignored_folders_settings": "\u7121\u8996\u3059\u308B\u30D5\u30A9\u30EB\u30C0\u8A2D\u5B9A",
    "display_mode_settings": "\u8868\u793A\u30E2\u30FC\u30C9\u8A2D\u5B9A",
    "show_bookmarks_mode": "\u30D6\u30C3\u30AF\u30DE\u30FC\u30AF\u30E2\u30FC\u30C9\u3092\u8868\u793A",
    "show_search_mode": "\u691C\u7D22\u7D50\u679C\u30E2\u30FC\u30C9\u3092\u8868\u793A",
    "show_backlinks_mode": "\u30D0\u30C3\u30AF\u30EA\u30F3\u30AF\u30E2\u30FC\u30C9\u3092\u8868\u793A",
    "show_all_files_mode": "\u5168\u30D5\u30A1\u30A4\u30EB\u30E2\u30FC\u30C9\u3092\u8868\u793A",
    "show_recent_files_mode": "\u6700\u8FD1\u30D5\u30A1\u30A4\u30EB\u30E2\u30FC\u30C9\u3092\u8868\u793A",
    "recent_files_count": "\u6700\u8FD1\u30D5\u30A1\u30A4\u30EB\u30E2\u30FC\u30C9\u8868\u793A\u7B46\u6570",
    "show_random_note_mode": "\u30E9\u30F3\u30C0\u30E0\u30CE\u30FC\u30C8\u30E2\u30FC\u30C9\u3092\u8868\u793A",
    "random_note_count": "\u30E9\u30F3\u30C0\u30E0\u30CE\u30FC\u30C8\u30E2\u30FC\u30C9\u8868\u793A\u7B46\u6570",
    "random_note_notes_only": "\u30CE\u30FC\u30C8\u306E\u307F",
    "random_note_include_media_files": "\u30E1\u30C7\u30A3\u30A2\u30D5\u30A1\u30A4\u30EB\u3092\u542B\u3080",
    // "親フォルダ"オプション設定を表示
    "show_parent_folder_item": "\u300C\u89AA\u30D5\u30A9\u30EB\u30C0\u300D\u9805\u76EE\u3092\u8868\u793A",
    "show_parent_folder_item_desc": "\u30B0\u30EA\u30C3\u30C9\u306E\u6700\u521D\u306E\u9805\u76EE\u3068\u3057\u3066\u300C\u89AA\u30D5\u30A9\u30EB\u30C0\u300D\u9805\u76EE\u3092\u8868\u793A\u3057\u307E\u3059",
    "parent_folder": "\u89AA\u30D5\u30A9\u30EB\u30C0",
    // 開く場所設定
    "default_open_location": "\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u958B\u304F\u5834\u6240",
    "default_open_location_desc": "\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC\u3092\u958B\u304F\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u5834\u6240\u3092\u8A2D\u5B9A",
    "open_in_left_sidebar": "\u5DE6\u30B5\u30A4\u30C9\u30D0\u30FC\u3067\u958B\u304F",
    "open_in_right_sidebar": "\u53F3\u30B5\u30A4\u30C9\u30D0\u30FC\u3067\u958B\u304F",
    "open_in_new_tab": "\u65B0\u3057\u3044\u30BF\u30D6\u3067\u958B\u304F",
    "reuse_existing_leaf": "\u65E2\u5B58\u306E\u30D3\u30E5\u30FC\u3092\u518D\u5229\u7528",
    "reuse_existing_leaf_desc": "\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC\u3092\u958B\u304F\u3068\u304D\u3001\u65B0\u3057\u3044\u30D3\u30E5\u30FC\u3092\u4F5C\u6210\u305B\u305A\u306B\u65E2\u5B58\u306E\u30D3\u30E5\u30FC\u3092\u512A\u5148\u4F7F\u7528",
    "custom_document_extensions": "\u30AB\u30B9\u30BF\u30E0\u6587\u66F8\u62E1\u5F35\u5B50",
    "custom_document_extensions_desc": "\u8FFD\u52A0\u306E\u6587\u66F8\u62E1\u5F35\u5B50\uFF08\u30AB\u30F3\u30DE\u533A\u5207\u308A\u3001\u30C9\u30C3\u30C8\u7121\u3057\uFF09",
    "custom_document_extensions_placeholder": "\u4F8B\uFF1Atxt,doc,docx",
    // フォルダ選択ダイアログ
    "select_folders": "\u30D5\u30A9\u30EB\u30C0\u3092\u9078\u629E",
    "open_grid_view": "\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC\u3092\u958B\u304F",
    "open_in_grid_view": "\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC\u3067\u958B\u304F",
    "open_note_in_grid_view": "\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC\u3067\u73FE\u5728\u306E\u30CE\u30FC\u30C8\u3092\u958B\u304F",
    "open_backlinks_in_grid_view": "\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC\u3067\u30D0\u30C3\u30AF\u30EA\u30F3\u30AF\u3092\u958B\u304F",
    "open_recent_files_in_grid_view": "\u6700\u8FD1\u306E\u30D5\u30A1\u30A4\u30EB\u3067\u73FE\u5728\u306E\u30CE\u30FC\u30C8\u3092\u958B\u304F",
    "open_settings": "\u8A2D\u5B9A\u3092\u958B\u304F",
    "open_new_grid_view": "\u65B0\u3057\u3044\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC\u3092\u958B\u304F",
    "delete_note": "\u30D5\u30A1\u30A4\u30EB\u3092\u524A\u9664",
    "open_folder_note": "\u30D5\u30A9\u30EB\u30C0\u30FC\u30CE\u30FC\u30C8\u3092\u958B\u304F",
    "create_folder_note": "\u30D5\u30A9\u30EB\u30C0\u30FC\u30CE\u30FC\u30C8\u3092\u4F5C\u6210",
    "delete_folder_note": "\u30D5\u30A9\u30EB\u30C0\u30FC\u30CE\u30FC\u30C8\u3092\u524A\u9664",
    "edit_folder_note_settings": "\u30D5\u30A9\u30EB\u30C0\u30FC\u30CE\u30FC\u30C8\u8A2D\u5B9A\u3092\u7DE8\u96C6",
    "ignore_folder": "\u3053\u306E\u30D5\u30A9\u30EB\u30C0\u30FC\u3092\u7121\u8996",
    "searching": "\u691C\u7D22\u4E2D...",
    "no_files": "\u30D5\u30A1\u30A4\u30EB\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093",
    "filter_folders": "\u30D5\u30A9\u30EB\u30C0\u3092\u30D5\u30A3\u30EB\u30BF\u30EA\u30F3\u30B0...",
    // フォルダーノート設定ダイアログ
    "folder_note_settings": "\u30D5\u30A9\u30EB\u30C0\u30FC\u30CE\u30FC\u30C8\u8A2D\u5B9A",
    "folder_sort_type": "\u30D5\u30A9\u30EB\u30C0\u306E\u4E26\u3073\u66FF\u3048",
    "folder_sort_type_desc": "\u3053\u306E\u30D5\u30A9\u30EB\u30C0\u306E\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u4E26\u3073\u66FF\u3048\u65B9\u6CD5\u3092\u8A2D\u5B9A",
    "folder_color": "\u30D5\u30A9\u30EB\u30C0\u306E\u8272",
    "folder_color_desc": "\u3053\u306E\u30D5\u30A9\u30EB\u30C0\u306E\u8868\u793A\u8272\u3092\u8A2D\u5B9A",
    "default_sort": "\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u4E26\u3073\u66FF\u3048",
    "no_color": "\u8272\u306A\u3057",
    "color_red": "\u8D64",
    "color_orange": "\u30AA\u30EC\u30F3\u30B8",
    "color_yellow": "\u9EC4",
    "color_green": "\u7DD1",
    "color_cyan": "\u30B7\u30A2\u30F3",
    "color_blue": "\u9752",
    "color_purple": "\u7D2B",
    "color_pink": "\u30D4\u30F3\u30AF",
    "confirm": "\u78BA\u8A8D",
    "note_color_settings": "\u30CE\u30FC\u30C8\u8272\u8A2D\u5B9A",
    "note_color": "\u30CE\u30FC\u30C8\u8272",
    "note_color_desc": "\u3053\u306E\u30CE\u30FC\u30C8\u306E\u8868\u793A\u8272\u3092\u8A2D\u5B9A",
    "set_note_color": "\u30CE\u30FC\u30C8\u8272\u3092\u8A2D\u5B9A",
    "rename_folder": "\u30D5\u30A9\u30EB\u30C0\u3092\u518D\u547D\u540D",
    "enter_new_folder_name": "\u65B0\u3057\u3044\u30D5\u30A9\u30EB\u30C0\u540D\u3092\u5165\u529B",
    "search_selection_in_grid_view": "... \u3092\u30B0\u30EA\u30C3\u30C9\u30D3\u30E5\u30FC\u3067\u691C\u7D22",
    "show_date_dividers": "\u65E5\u4ED8\u533A\u5207\u308A\u3092\u8868\u793A",
    "show_date_dividers_desc": "\u65E5\u4ED8\u95A2\u9023\u306E\u4E26\u3073\u66FF\u3048\u6642\u3001\u5404\u65E5\u306E\u6700\u521D\u306E\u30A2\u30A4\u30C6\u30E0\u306E\u524D\u306B\u65E5\u4ED8\u533A\u5207\u308A\u3092\u8868\u793A\u3059\u308B",
    "date_divider_format": "\u65E5\u4ED8\u533A\u5207\u308A\u30D5\u30A9\u30FC\u30DE\u30C3\u30C8",
    "date_divider_mode": "\u65E5\u4ED8\u533A\u5207\u308A",
    "date_divider_mode_desc": "\u65E5\u4ED8\u533A\u5207\u308A\u306E\u8868\u793A\u30E2\u30FC\u30C9\u3092\u9078\u629E",
    "date_divider_mode_none": "\u4F7F\u7528\u3057\u306A\u3044",
    "date_divider_mode_year": "\u5E74",
    "date_divider_mode_month": "\u6708",
    "date_divider_mode_day": "\u65E5"
  }
};

// src/FolderSelectionModal.ts
function showFolderSelectionModal(app, plugin, activeView) {
  new FolderSelectionModal(app, plugin, activeView).open();
}
var FolderSelectionModal = class extends import_obsidian.Modal {
  constructor(app, plugin, activeView) {
    super(app);
    this.folderOptions = [];
    this.selectedIndex = -1;
    this.plugin = plugin;
    this.activeView = activeView;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const searchContainer = contentEl.createEl("div", {
      cls: "ge-folder-search-container"
    });
    this.searchInput = searchContainer.createEl("input", {
      cls: "ge-folder-search-input",
      attr: {
        type: "text",
        placeholder: t("filter_folders"),
        ...import_obsidian.Platform.isMobile && { tabindex: "1" }
      }
    });
    this.folderOptionsContainer = contentEl.createEl("div", {
      cls: "ge-folder-options-container",
      attr: import_obsidian.Platform.isMobile ? { tabindex: "0" } : {}
    });
    this.searchInput.addEventListener("input", () => {
      const searchTerm = this.searchInput.value.toLowerCase();
      this.filterFolderOptions(searchTerm);
    });
    this.searchInput.addEventListener("keydown", this.handleKeyDown.bind(this));
    if (this.plugin.settings.showBookmarksMode) {
      const bookmarksPlugin = this.app.internalPlugins.plugins.bookmarks;
      if (bookmarksPlugin == null ? void 0 : bookmarksPlugin.enabled) {
        const bookmarkOption = this.folderOptionsContainer.createEl("div", {
          cls: "ge-grid-view-folder-option ge-special-option",
          text: `\u{1F4D1} ${t("bookmarks_mode")}`
        });
        bookmarkOption.addEventListener("click", () => {
          if (this.activeView) {
            this.activeView.setSource("bookmarks", "", true);
          } else {
            this.plugin.activateView("bookmarks");
          }
          this.close();
        });
        this.folderOptions.push(bookmarkOption);
      }
    }
    if (this.plugin.settings.showSearchMode) {
      const searchLeaf = this.app.workspace.getLeavesOfType("search")[0];
      if (searchLeaf) {
        const searchView = searchLeaf.view;
        const searchInputEl = searchView.searchComponent ? searchView.searchComponent.inputEl : null;
        if (searchInputEl) {
          if (searchInputEl.value.trim().length > 0) {
            const searchOption = this.folderOptionsContainer.createEl("div", {
              cls: "ge-grid-view-folder-option ge-special-option",
              text: `\u{1F50D} ${t("search_results")}: ${searchInputEl.value}`
            });
            searchOption.addEventListener("click", () => {
              if (this.activeView) {
                this.activeView.setSource("search", "", true);
              } else {
                this.plugin.activateView("search");
              }
              this.close();
            });
            this.folderOptions.push(searchOption);
          }
        }
      }
    }
    if (this.plugin.settings.showBacklinksMode) {
      const activeFile = this.app.workspace.getActiveFile();
      if (activeFile) {
        const activeFileName = activeFile ? `: ${activeFile.basename}` : "";
        const backlinksOption = this.folderOptionsContainer.createEl("div", {
          cls: "ge-grid-view-folder-option ge-special-option",
          text: `\u{1F517} ${t("backlinks_mode")}${activeFileName}`
        });
        backlinksOption.addEventListener("click", () => {
          if (this.activeView) {
            this.activeView.setSource("backlinks", "", true);
          } else {
            this.plugin.activateView("backlinks");
          }
          this.close();
        });
        this.folderOptions.push(backlinksOption);
      }
    }
    if (this.plugin.settings.showRecentFilesMode) {
      const recentFilesOption = this.folderOptionsContainer.createEl("div", {
        cls: "ge-grid-view-folder-option ge-special-option",
        text: `\u{1F4C5} ${t("recent_files_mode")}`
      });
      recentFilesOption.addEventListener("click", () => {
        if (this.activeView) {
          this.activeView.setSource("recent-files", "", true);
        } else {
          this.plugin.activateView("recent-files");
        }
        this.close();
      });
      this.folderOptions.push(recentFilesOption);
    }
    if (this.plugin.settings.showAllFilesMode) {
      const allFilesOption = this.folderOptionsContainer.createEl("div", {
        cls: "ge-grid-view-folder-option ge-special-option",
        text: `\u{1F4D4} ${t("all_files_mode")}`
      });
      allFilesOption.addEventListener("click", () => {
        if (this.activeView) {
          this.activeView.setSource("all-files", "", true);
        } else {
          this.plugin.activateView("all-files");
        }
        this.close();
      });
      this.folderOptions.push(allFilesOption);
    }
    if (this.plugin.settings.showRandomNoteMode) {
      const randomNoteOption = this.folderOptionsContainer.createEl("div", {
        cls: "ge-grid-view-folder-option ge-special-option",
        text: `\u{1F3B2} ${t("random_note_mode")}`
      });
      randomNoteOption.addEventListener("click", () => {
        if (this.activeView) {
          this.activeView.setSource("random-note", "", true);
        } else {
          this.plugin.activateView("random-note");
        }
        this.close();
      });
      this.folderOptions.push(randomNoteOption);
    }
    const rootFolderOption = this.folderOptionsContainer.createEl("div", {
      cls: "ge-grid-view-folder-option",
      text: `\u{1F4C1} /`
    });
    rootFolderOption.addEventListener("click", () => {
      if (this.activeView) {
        this.activeView.setSource("folder", "/", true);
      } else {
        this.plugin.activateView("folder", "/");
      }
      this.close();
    });
    this.folderOptions.push(rootFolderOption);
    const folders = this.app.vault.getAllFolders().filter((folder) => {
      return !this.plugin.settings.ignoredFolders.some(
        (ignoredPath) => folder.path === ignoredPath || folder.path.startsWith(ignoredPath + "/")
      );
    }).sort((a, b) => a.path.localeCompare(b.path));
    folders.forEach((folder) => {
      const folderOption = this.folderOptionsContainer.createEl("div", {
        cls: "ge-grid-view-folder-option",
        text: `\u{1F4C1} ${folder.path || "/"}`
      });
      folderOption.addEventListener("click", () => {
        if (this.activeView) {
          this.activeView.setSource("folder", folder.path, true);
        } else {
          this.plugin.activateView("folder", folder.path);
        }
        this.close();
      });
      this.folderOptions.push(folderOption);
    });
    this.folderOptions.forEach((option, index) => {
      option.addEventListener("mouseenter", () => {
        this.updateSelection(index);
      });
    });
    if (this.activeView) {
      this.activeView.disableKeyboardNavigation();
    }
  }
  // 處理鍵盤事件
  handleKeyDown(event) {
    const visibleOptions = this.getVisibleOptions();
    if (visibleOptions.length === 0)
      return;
    switch (event.key) {
      case "ArrowDown":
        event.preventDefault();
        this.moveSelection(1, visibleOptions);
        break;
      case "ArrowUp":
        event.preventDefault();
        this.moveSelection(-1, visibleOptions);
        break;
      case "Enter":
        event.preventDefault();
        if (this.selectedIndex >= 0) {
          const selectedOption = this.folderOptions[this.selectedIndex];
          if (selectedOption && selectedOption.style.display !== "none") {
            selectedOption.click();
          }
        }
        break;
      case "Escape":
        this.close();
        break;
    }
  }
  // 移動選擇
  moveSelection(direction, visibleOptions) {
    let currentVisibleIndex = -1;
    if (this.selectedIndex >= 0) {
      const selectedOption = this.folderOptions[this.selectedIndex];
      currentVisibleIndex = visibleOptions.indexOf(selectedOption);
    }
    let newVisibleIndex = currentVisibleIndex + direction;
    if (newVisibleIndex < 0) {
      newVisibleIndex = visibleOptions.length - 1;
    } else if (newVisibleIndex >= visibleOptions.length) {
      newVisibleIndex = 0;
    }
    if (newVisibleIndex >= 0 && newVisibleIndex < visibleOptions.length) {
      const newSelectedOption = visibleOptions[newVisibleIndex];
      const newIndex = this.folderOptions.indexOf(newSelectedOption);
      this.updateSelection(newIndex);
      newSelectedOption.scrollIntoView({ block: "nearest" });
    }
  }
  // 更新選擇
  updateSelection(index) {
    if (this.selectedIndex >= 0 && this.selectedIndex < this.folderOptions.length) {
      this.folderOptions[this.selectedIndex].removeClass("ge-selected-option");
    }
    this.selectedIndex = index;
    if (this.selectedIndex >= 0 && this.selectedIndex < this.folderOptions.length) {
      this.folderOptions[this.selectedIndex].addClass("ge-selected-option");
    }
  }
  // 獲取當前可見的選項
  getVisibleOptions() {
    return this.folderOptions.filter(
      (option) => option.style.display !== "none"
    );
  }
  // 篩選資料夾選項
  filterFolderOptions(searchTerm) {
    let hasVisibleOptions = false;
    this.folderOptions.forEach((option) => {
      var _a;
      const text = ((_a = option.textContent) == null ? void 0 : _a.toLowerCase()) || "";
      if (searchTerm === "" || text.includes(searchTerm)) {
        option.style.display = "block";
        hasVisibleOptions = true;
      } else {
        option.style.display = "none";
      }
    });
    this.updateSelection(-1);
    if (hasVisibleOptions) {
      const visibleOptions = this.getVisibleOptions();
      if (visibleOptions.length > 0) {
        const firstVisibleIndex = this.folderOptions.indexOf(visibleOptions[0]);
        this.updateSelection(firstVisibleIndex);
      }
    }
  }
  onClose() {
    if (this.activeView) {
      this.activeView.enableKeyboardNavigation();
    }
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/mediaUtils.ts
var import_obsidian2 = require("obsidian");
async function findFirstImageInNote(app, content) {
  try {
    const internalMatch = content.match(/(?:!?\[\[(.*?\.(?:jpg|jpeg|png|gif|webp))(?:\|.*?)?\]\]|!\[(.*?)\]\(\s*(\S+?(?:\.(?:jpg|jpeg|png|gif|webp)|format=(?:jpg|jpeg|png|gif|webp))[^\s)]*)\s*(?:\s+["'][^"']*["'])?\s*\))/i);
    if (internalMatch) {
      return processMediaLink(app, internalMatch);
    } else {
      return null;
    }
  } catch (error) {
    console.error("Error finding image in note:", error);
    return null;
  }
}
function processMediaLink(app, linkText) {
  const internalMatch = linkText[0].match(/!?\[\[(.*?)\]\]/);
  if (internalMatch) {
    if (linkText[1]) {
      const file = app.metadataCache.getFirstLinkpathDest(linkText[1], "");
      if (file) {
        return app.vault.getResourcePath(file);
      }
    }
    return null;
  }
  const markdownMatch = linkText[0].match(/!?\[(.*?)\]\((.*?)\)/);
  if (markdownMatch) {
    if (linkText[3]) {
      const url = linkText[3];
      if (url.startsWith("http")) {
        return url;
      } else {
        const file = app.metadataCache.getFirstLinkpathDest(url, "");
        if (!file) {
          const fileByPath = app.vault.getAbstractFileByPath(url);
          if (fileByPath instanceof import_obsidian2.TFile) {
            return app.vault.getResourcePath(fileByPath);
          }
        } else {
          return app.vault.getResourcePath(file);
        }
      }
    }
  }
  return null;
}

// src/MediaModal.ts
var import_obsidian4 = require("obsidian");

// src/fileUtils.ts
var import_obsidian3 = require("obsidian");
var customDocumentExtensions = [];
function updateCustomDocumentExtensions(settings) {
  if (settings.customDocumentExtensions) {
    customDocumentExtensions = settings.customDocumentExtensions.split(",").map((ext) => ext.trim().toLowerCase()).filter((ext) => ext.length > 0);
  } else {
    customDocumentExtensions = [];
  }
}
function isDocumentFile(file) {
  const defaultDocumentExtensions = ["md", "pdf", "canvas"];
  const extension = file.extension.toLowerCase();
  return defaultDocumentExtensions.includes(extension) || customDocumentExtensions.includes(extension);
}
function isImageFile(file) {
  const imageExtensions = ["jpg", "jpeg", "png", "gif", "webp", "avif", "bmp", "svg"];
  return imageExtensions.includes(file.extension.toLowerCase());
}
function isVideoFile(file) {
  const videoExtensions = ["mp4", "webm", "mov", "avi", "mkv", "ogv"];
  return videoExtensions.includes(file.extension.toLowerCase());
}
function isAudioFile(file) {
  const audioExtensions = ["flac", "m4a", "mp3", "ogg", "wav", "3gp"];
  return audioExtensions.includes(file.extension.toLowerCase());
}
function isMediaFile(file) {
  return isImageFile(file) || isVideoFile(file) || isAudioFile(file);
}
function sortFiles(files, gridView) {
  const app = gridView.app;
  const settings = gridView.plugin.settings;
  const sortType = gridView.folderSortType ? gridView.folderSortType : gridView.sortType;
  const isNonDateSort = ["name-asc", "name-desc", "random"].includes(sortType);
  const hasModifiedField = !!settings.modifiedDateField;
  const hasCreatedField = !!settings.createdDateField;
  const hasAnyDateField = hasModifiedField || hasCreatedField;
  const shouldUseSimpleSort = isNonDateSort || !hasAnyDateField;
  if (shouldUseSimpleSort) {
    if (sortType === "name-asc") {
      return files.sort((a, b) => a.basename.localeCompare(b.basename));
    } else if (sortType === "name-desc") {
      return files.sort((a, b) => b.basename.localeCompare(a.basename));
    } else if (sortType === "mtime-desc") {
      return files.sort((a, b) => b.stat.mtime - a.stat.mtime);
    } else if (sortType === "mtime-asc") {
      return files.sort((a, b) => a.stat.mtime - b.stat.mtime);
    } else if (sortType === "ctime-desc") {
      return files.sort((a, b) => b.stat.ctime - a.stat.ctime);
    } else if (sortType === "ctime-asc") {
      return files.sort((a, b) => a.stat.ctime - b.stat.ctime);
    } else if (sortType === "random") {
      return files.sort(() => Math.random() - 0.5);
    } else {
      return files;
    }
  }
  const filesWithDates = files.map((file) => {
    const shouldReadMetadata = file.extension === "md";
    const metadata = shouldReadMetadata ? app.metadataCache.getFileCache(file) : null;
    return {
      file,
      mDate: (() => {
        if (metadata == null ? void 0 : metadata.frontmatter) {
          const fieldName = settings.modifiedDateField;
          const dateStr = metadata.frontmatter[fieldName];
          if (dateStr) {
            const date = new Date(dateStr);
            if (!isNaN(date.getTime())) {
              return date.getTime();
            }
          }
        }
        return file.stat.mtime;
      })(),
      cDate: (() => {
        if (metadata == null ? void 0 : metadata.frontmatter) {
          const fieldName = settings.createdDateField;
          const dateStr = metadata.frontmatter[fieldName];
          if (dateStr) {
            const date = new Date(dateStr);
            if (!isNaN(date.getTime())) {
              return date.getTime();
            }
          }
        }
        return file.stat.ctime;
      })()
    };
  });
  if (sortType === "mtime-desc") {
    return filesWithDates.sort((a, b) => b.mDate - a.mDate).map((item) => item.file);
  } else if (sortType === "mtime-asc") {
    return filesWithDates.sort((a, b) => a.mDate - b.mDate).map((item) => item.file);
  } else if (sortType === "ctime-desc") {
    return filesWithDates.sort((a, b) => b.cDate - a.cDate).map((item) => item.file);
  } else if (sortType === "ctime-asc") {
    return filesWithDates.sort((a, b) => a.cDate - b.cDate).map((item) => item.file);
  } else {
    return files;
  }
}
function ignoredFiles(files, gridView) {
  const settings = gridView.plugin.settings;
  return files.filter((file) => {
    const isInIgnoredFolder = settings.ignoredFolders.some(
      (folder) => file.path.startsWith(`${folder}/`)
    );
    if (isInIgnoredFolder) {
      return false;
    }
    if (settings.ignoredFolderPatterns && settings.ignoredFolderPatterns.length > 0) {
      const matchesIgnoredPattern = settings.ignoredFolderPatterns.some((pattern) => {
        try {
          if (/[\^\$\*\+\?\(\)\[\]\{\}\|\\]/.test(pattern)) {
            const regex = new RegExp(pattern);
            return regex.test(file.path);
          } else {
            return file.path.toLowerCase().includes(pattern.toLowerCase());
          }
        } catch (error) {
          return file.path.toLowerCase().includes(pattern.toLowerCase());
        }
      });
      return !matchesIgnoredPattern;
    }
    return true;
  });
}
async function getFiles(gridView) {
  const app = gridView.app;
  const settings = gridView.plugin.settings;
  const sourceMode = gridView.sourceMode;
  const sourcePath = gridView.sourcePath;
  const randomNoteIncludeMedia = gridView.randomNoteIncludeMedia;
  if (sourceMode === "folder" && sourcePath) {
    const folder = app.vault.getAbstractFileByPath(sourcePath);
    if (folder instanceof import_obsidian3.TFolder) {
      const files = folder.children.filter((file) => {
        if (!(file instanceof import_obsidian3.TFile))
          return false;
        if (isDocumentFile(file) || settings.showMediaFiles && isMediaFile(file)) {
          return true;
        }
        return false;
      });
      return sortFiles(files, gridView);
    }
    return [];
  } else if (sourceMode === "search") {
    const globalSearchPlugin = app.internalPlugins.getPluginById("global-search");
    if (globalSearchPlugin == null ? void 0 : globalSearchPlugin.instance) {
      const searchLeaf = app.workspace.getLeavesOfType("search")[0];
      if (searchLeaf && searchLeaf.view && searchLeaf.view.dom) {
        const resultDomLookup = searchLeaf.view.dom.resultDomLookup;
        if (resultDomLookup) {
          const files = Array.from(resultDomLookup.keys()).filter((file) => file instanceof import_obsidian3.TFile);
          return sortFiles(files, gridView);
        }
      }
    }
    return [];
  } else if (sourceMode === "backlinks") {
    const activeFile = app.workspace.getActiveFile();
    if (!activeFile) {
      return [];
    }
    const backlinks = /* @__PURE__ */ new Set();
    const resolvedLinks = app.metadataCache.resolvedLinks;
    for (const [sourcePath2, links] of Object.entries(resolvedLinks)) {
      if (Object.keys(links).includes(activeFile.path)) {
        const sourceFile = app.vault.getAbstractFileByPath(sourcePath2);
        if (sourceFile) {
          backlinks.add(sourceFile);
        }
      }
    }
    return sortFiles(Array.from(backlinks), gridView);
  } else if (sourceMode === "bookmarks") {
    const bookmarksPlugin = app.internalPlugins.plugins.bookmarks;
    if (!(bookmarksPlugin == null ? void 0 : bookmarksPlugin.enabled)) {
      return [];
    }
    const bookmarks = bookmarksPlugin.instance.items;
    const bookmarkedFiles = /* @__PURE__ */ new Set();
    const processBookmarkItem = (item) => {
      if (item.type === "file") {
        const file = app.vault.getAbstractFileByPath(item.path);
        if (file instanceof import_obsidian3.TFile) {
          if (isDocumentFile(file) || settings.showMediaFiles && isMediaFile(file)) {
            bookmarkedFiles.add(file);
          }
        }
      } else if (item.type === "group" && item.items) {
        item.items.forEach(processBookmarkItem);
      }
    };
    bookmarks.forEach(processBookmarkItem);
    return Array.from(bookmarkedFiles);
  } else if (sourceMode === "all-files") {
    const allVaultFiles = app.vault.getFiles().filter((file) => {
      if (isDocumentFile(file) || settings.showMediaFiles && randomNoteIncludeMedia && isMediaFile(file)) {
        return true;
      }
      return false;
    });
    return sortFiles(allVaultFiles, gridView);
  } else if (sourceMode === "recent-files") {
    const recentFiles = app.vault.getFiles().filter((file) => {
      if (isDocumentFile(file) || settings.showMediaFiles && randomNoteIncludeMedia && isMediaFile(file)) {
        return true;
      }
      return false;
    });
    const sortType = gridView.sortType;
    gridView.sortType = "mtime-desc";
    const sortedFiles = sortFiles(recentFiles, gridView);
    gridView.sortType = sortType;
    return sortedFiles;
  } else if (sourceMode === "random-note") {
    const randomFiles = app.vault.getFiles().filter((file) => {
      if (isDocumentFile(file) || settings.showMediaFiles && randomNoteIncludeMedia && isMediaFile(file)) {
        return true;
      }
      return false;
    }).sort(() => Math.random() - 0.5);
    return randomFiles;
  } else {
    return [];
  }
}

// src/MediaModal.ts
var MediaModal = class extends import_obsidian4.Modal {
  // 儲存 GridView 實例的引用
  constructor(app, file, mediaFiles, gridView) {
    super(app);
    this.currentMediaElement = null;
    this.isZoomed = false;
    this.handleWheel = null;
    this.file = file;
    this.mediaFiles = mediaFiles;
    this.currentIndex = this.mediaFiles.findIndex((f) => f.path === file.path);
    this.gridView = gridView;
    this.modalEl.addClass("ge-media-modal");
  }
  onOpen() {
    const { contentEl } = this;
    if (this.gridView) {
      this.gridView.disableKeyboardNavigation();
    }
    contentEl.empty();
    contentEl.style.width = "100%";
    contentEl.style.height = "100%";
    contentEl.addClass("ge-media-modal-content");
    const mediaView = contentEl.createDiv("ge-media-view");
    const closeButton = contentEl.createDiv("ge-media-close-button");
    (0, import_obsidian4.setIcon)(closeButton, "x");
    closeButton.addEventListener("click", (e) => {
      e.stopPropagation();
      this.close();
    });
    const prevArea = contentEl.createDiv("ge-media-prev-area");
    const nextArea = contentEl.createDiv("ge-media-next-area");
    const mediaContainer = mediaView.createDiv("ge-media-container");
    mediaContainer.addEventListener("click", (e) => {
      if (e.target === mediaContainer) {
        this.close();
      }
    });
    prevArea.addEventListener("click", (e) => {
      e.stopPropagation();
      this.showPrevMedia();
    });
    nextArea.addEventListener("click", (e) => {
      e.stopPropagation();
      this.showNextMedia();
    });
    contentEl.addEventListener("wheel", (e) => {
      if (!this.isZoomed) {
        e.preventDefault();
        if (e.deltaY > 0) {
          this.showNextMedia();
        } else {
          this.showPrevMedia();
        }
      }
    });
    this.scope.register(null, "ArrowLeft", () => {
      this.showPrevMedia();
      return false;
    });
    this.scope.register(null, "ArrowRight", () => {
      this.showNextMedia();
      return false;
    });
    this.showMediaAtIndex(this.currentIndex);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.handleWheel) {
      const mediaView = contentEl.querySelector(".ge-media-view");
      if (mediaView) {
        mediaView.removeEventListener("wheel", this.handleWheel);
      }
      this.handleWheel = null;
    }
    if (this.gridView) {
      this.gridView.enableKeyboardNavigation();
      const currentFile = this.mediaFiles[this.currentIndex];
      const gridItemIndex = this.gridView.gridItems.findIndex(
        (item) => item.dataset.filePath === currentFile.path
      );
      if (gridItemIndex >= 0) {
        this.gridView.hasKeyboardFocus = true;
        this.gridView.selectItem(gridItemIndex);
      }
    }
  }
  // 顯示指定索引的媒體檔案
  showMediaAtIndex(index) {
    if (index < 0 || index >= this.mediaFiles.length)
      return;
    const { contentEl } = this;
    const mediaContainer = contentEl.querySelector(".ge-media-container");
    if (!mediaContainer)
      return;
    this.currentIndex = index;
    if (this.handleWheel) {
      const mediaView = contentEl.querySelector(".ge-media-view");
      if (mediaView) {
        mediaView.removeEventListener("wheel", this.handleWheel);
      }
      this.handleWheel = null;
    }
    this.isZoomed = false;
    const mediaFile = this.mediaFiles[index];
    if (isImageFile(mediaFile)) {
      const img = document.createElement("img");
      img.className = "ge-fullscreen-image";
      img.style.display = "none";
      img.src = this.app.vault.getResourcePath(mediaFile);
      img.onload = () => {
        if (this.currentMediaElement) {
          this.currentMediaElement.remove();
        }
        this.currentMediaElement = img;
        this.resetImageStyles(img);
        img.style.display = "";
      };
      mediaContainer.appendChild(img);
      img.addEventListener("click", (event) => {
        event.stopPropagation();
        this.toggleImageZoom(img);
      });
    } else if (isVideoFile(mediaFile) || isAudioFile(mediaFile)) {
      if (this.currentMediaElement) {
        this.currentMediaElement.remove();
      }
      const video = document.createElement("video");
      video.className = "ge-fullscreen-video";
      video.controls = true;
      video.autoplay = true;
      video.src = this.app.vault.getResourcePath(mediaFile);
      mediaContainer.appendChild(video);
      this.currentMediaElement = video;
    }
    const oldFileNameElement = mediaContainer.querySelector(".ge-fullscreen-file-name");
    if (oldFileNameElement) {
      oldFileNameElement.remove();
    }
    if (isAudioFile(mediaFile)) {
      const fileName = mediaFile.name;
      const fileNameElement = document.createElement("div");
      fileNameElement.className = "ge-fullscreen-file-name";
      fileNameElement.textContent = fileName;
      mediaContainer.appendChild(fileNameElement);
    }
  }
  // 顯示下一個媒體檔案
  showNextMedia() {
    const nextIndex = (this.currentIndex + 1) % this.mediaFiles.length;
    this.showMediaAtIndex(nextIndex);
  }
  // 顯示上一個媒體檔案
  showPrevMedia() {
    const prevIndex = (this.currentIndex - 1 + this.mediaFiles.length) % this.mediaFiles.length;
    this.showMediaAtIndex(prevIndex);
  }
  // 重設圖片樣式
  resetImageStyles(img) {
    const mediaView = this.contentEl.querySelector(".ge-media-view");
    if (!mediaView)
      return;
    img.style.width = "auto";
    img.style.height = "auto";
    img.style.maxWidth = "100vw";
    img.style.maxHeight = "100vh";
    img.style.position = "absolute";
    img.style.left = "50%";
    img.style.top = "50%";
    img.style.transform = "translate(-50%, -50%)";
    img.style.cursor = "zoom-in";
    mediaView.style.overflowX = "hidden";
    mediaView.style.overflowY = "hidden";
    img.onload = () => {
      if (mediaView.clientWidth > mediaView.clientHeight) {
        if (img.naturalHeight < mediaView.clientHeight) {
          img.style.height = "100%";
        }
      } else {
        if (img.naturalWidth < mediaView.clientWidth) {
          img.style.width = "100%";
        }
      }
    };
    if (img.complete) {
      if (mediaView.clientWidth > mediaView.clientHeight) {
        if (img.naturalHeight < mediaView.clientHeight) {
          img.style.height = "100%";
        }
      } else {
        if (img.naturalWidth < mediaView.clientWidth) {
          img.style.width = "100%";
        }
      }
    }
  }
  // 切換圖片縮放
  toggleImageZoom(img) {
    const mediaView = this.contentEl.querySelector(".ge-media-view");
    if (!mediaView)
      return;
    if (!this.isZoomed) {
      if (mediaView.clientWidth > mediaView.clientHeight) {
        if (img.naturalHeight < mediaView.clientHeight) {
          img.style.maxWidth = "none";
        }
      } else {
        if (img.naturalWidth < mediaView.clientWidth) {
          img.style.maxHeight = "none";
        }
      }
      if (img.offsetWidth < mediaView.clientWidth) {
        img.style.width = "100vw";
        img.style.height = "auto";
        mediaView.style.overflowX = "hidden";
        mediaView.style.overflowY = "scroll";
      } else {
        img.style.width = "auto";
        img.style.height = "100vh";
        mediaView.style.overflowX = "scroll";
        mediaView.style.overflowY = "hidden";
        this.handleWheel = (event) => {
          event.preventDefault();
          mediaView.scrollLeft += event.deltaY;
        };
        mediaView.addEventListener("wheel", this.handleWheel);
      }
      img.style.maxWidth = "none";
      img.style.maxHeight = "none";
      img.style.position = "relative";
      img.style.left = "0";
      img.style.top = "0";
      img.style.margin = "auto";
      img.style.transform = "none";
      img.style.cursor = "zoom-out";
      this.isZoomed = true;
    } else {
      if (this.handleWheel) {
        mediaView.removeEventListener("wheel", this.handleWheel);
        this.handleWheel = null;
      }
      this.resetImageStyles(img);
      this.isZoomed = false;
    }
  }
};

// src/FolderNoteSettingsModal.ts
var import_obsidian5 = require("obsidian");
function showFolderNoteSettingsModal(app, plugin, folder) {
  new FolderNoteSettingsModal(app, plugin, folder).open();
}
var FolderNoteSettingsModal = class extends import_obsidian5.Modal {
  constructor(app, plugin, folder) {
    super(app);
    this.settings = {
      sort: "",
      color: ""
    };
    this.existingFile = null;
    this.plugin = plugin;
    this.folder = folder;
    const notePath = `${folder.path}/${folder.name}.md`;
    const noteFile = this.app.vault.getAbstractFileByPath(notePath);
    if (noteFile instanceof import_obsidian5.TFile) {
      this.existingFile = noteFile;
    }
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.existingFile) {
      await this.loadExistingSettings();
    }
    new import_obsidian5.Setting(contentEl).setName(t("folder_note_settings")).setHeading();
    new import_obsidian5.Setting(contentEl).setName(t("folder_sort_type")).setDesc(t("folder_sort_type_desc")).addDropdown((dropdown) => {
      dropdown.addOption("", t("default_sort")).addOption("name-asc", t("sort_name_asc")).addOption("name-desc", t("sort_name_desc")).addOption("mtime-desc", t("sort_mtime_desc")).addOption("mtime-asc", t("sort_mtime_asc")).addOption("ctime-desc", t("sort_ctime_desc")).addOption("ctime-asc", t("sort_ctime_asc")).addOption("random", t("sort_random")).setValue(this.settings.sort).onChange((value) => {
        this.settings.sort = value;
      });
    });
    new import_obsidian5.Setting(contentEl).setName(t("folder_color")).setDesc(t("folder_color_desc")).addDropdown((dropdown) => {
      dropdown.addOption("", t("no_color")).addOption("red", t("color_red")).addOption("orange", t("color_orange")).addOption("yellow", t("color_yellow")).addOption("green", t("color_green")).addOption("cyan", t("color_cyan")).addOption("blue", t("color_blue")).addOption("purple", t("color_purple")).addOption("pink", t("color_pink")).setValue(this.settings.color).onChange((value) => {
        this.settings.color = value;
      });
    });
    const buttonSetting = new import_obsidian5.Setting(contentEl);
    buttonSetting.addButton((button) => {
      button.setButtonText(t("confirm")).setCta().onClick(() => {
        this.saveFolderNote();
        this.close();
      });
    });
  }
  // 讀取現有筆記的設定
  async loadExistingSettings() {
    if (!this.existingFile)
      return;
    try {
      const fileCache = this.app.metadataCache.getFileCache(this.existingFile);
      if (fileCache && fileCache.frontmatter) {
        if ("sort" in fileCache.frontmatter) {
          this.settings.sort = fileCache.frontmatter.sort || "";
        }
        if ("color" in fileCache.frontmatter) {
          this.settings.color = fileCache.frontmatter.color || "";
        }
      }
    } catch (error) {
      console.error("\u7121\u6CD5\u8B80\u53D6\u8CC7\u6599\u593E\u7B46\u8A18\u8A2D\u5B9A", error);
    }
  }
  // 儲存或更新資料夾筆記
  async saveFolderNote() {
    const notePath = `${this.folder.path}/${this.folder.name}.md`;
    try {
      let file;
      if (this.existingFile) {
        file = this.existingFile;
      } else {
        file = await this.app.vault.create(notePath, "");
        await this.app.workspace.getLeaf().openFile(file);
      }
      await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
        frontmatter["sort"] = this.settings.sort;
        frontmatter["color"] = this.settings.color;
      });
      this.app.metadataCache.getFileCache(file);
      setTimeout(() => {
        this.app.workspace.getLeavesOfType("grid-view").forEach((leaf) => {
          if (leaf.view instanceof GridView) {
            leaf.view.render();
          }
        });
      }, 200);
    } catch (error) {
      console.error("\u7121\u6CD5\u5132\u5B58\u8CC7\u6599\u593E\u7B46\u8A18", error);
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/NoteColorSettingsModal.ts
var import_obsidian6 = require("obsidian");
function showNoteColorSettingsModal(app, plugin, file) {
  new NoteColorSettingsModal(app, plugin, file).open();
}
var NoteColorSettingsModal = class extends import_obsidian6.Modal {
  constructor(app, plugin, file) {
    super(app);
    this.settings = {
      color: ""
    };
    this.plugin = plugin;
    this.files = Array.isArray(file) ? file : [file];
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    await this.loadExistingSettings();
    if (this.files.length > 1) {
      new import_obsidian6.Setting(contentEl).setName(t("note_color_settings") + ` (${this.files.length} ${t("files")})`).setHeading();
    } else {
      new import_obsidian6.Setting(contentEl).setName(t("note_color_settings") + `: ${this.files[0].basename}`).setHeading();
    }
    new import_obsidian6.Setting(contentEl).setName(t("note_color")).setDesc(t("note_color_desc")).addDropdown((dropdown) => {
      dropdown.addOption("", t("no_color")).addOption("red", t("color_red")).addOption("orange", t("color_orange")).addOption("yellow", t("color_yellow")).addOption("green", t("color_green")).addOption("cyan", t("color_cyan")).addOption("blue", t("color_blue")).addOption("purple", t("color_purple")).addOption("pink", t("color_pink")).setValue(this.settings.color).onChange((value) => {
        this.settings.color = value;
      });
    });
    const buttonSetting = new import_obsidian6.Setting(contentEl);
    buttonSetting.addButton((button) => {
      button.setButtonText(t("confirm")).setCta().onClick(() => {
        this.saveNoteColor();
        this.close();
      });
    });
  }
  // 讀取現有筆記的設定
  async loadExistingSettings() {
    try {
      if (this.files.length > 0) {
        const fileCache = this.app.metadataCache.getFileCache(this.files[0]);
        if (fileCache && fileCache.frontmatter) {
          if ("color" in fileCache.frontmatter) {
            this.settings.color = fileCache.frontmatter.color || "";
          }
        }
      }
    } catch (error) {
      console.error("\u7121\u6CD5\u8B80\u53D6\u7B46\u8A18\u984F\u8272\u8A2D\u5B9A", error);
    }
  }
  // 儲存筆記顏色設定
  async saveNoteColor() {
    try {
      for (const file of this.files) {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          frontmatter["color"] = this.settings.color;
        });
      }
      setTimeout(() => {
        this.app.workspace.getLeavesOfType("grid-view").forEach((leaf) => {
          if (leaf.view instanceof GridView) {
            leaf.view.render();
          }
        });
      }, 200);
    } catch (error) {
      console.error("\u7121\u6CD5\u5132\u5B58\u7B46\u8A18\u984F\u8272\u8A2D\u5B9A", error);
    }
  }
};

// src/FolderRenameModal.ts
var import_obsidian7 = require("obsidian");
function showFolderRenameModal(app, plugin, folder, gridView) {
  new FolderRenameModal(app, plugin, folder, gridView).open();
}
var FolderRenameModal = class extends import_obsidian7.Modal {
  constructor(app, plugin, folder, gridView) {
    super(app);
    this.plugin = plugin;
    this.folder = folder;
    this.gridView = gridView;
    this.newName = folder.name;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.gridView) {
      this.gridView.disableKeyboardNavigation();
    }
    new import_obsidian7.Setting(contentEl).setName(t("rename_folder")).setDesc(t("enter_new_folder_name")).addText((text) => {
      text.setValue(this.folder.name).onChange((value) => {
        this.newName = value;
      });
    });
    new import_obsidian7.Setting(contentEl).addButton((button) => {
      button.setButtonText(t("confirm")).setCta().onClick(() => {
        this.renameFolder();
        this.close();
      });
    }).addButton((button) => {
      button.setButtonText(t("cancel")).onClick(() => {
        this.close();
      });
    });
  }
  async renameFolder() {
    try {
      await this.app.fileManager.renameFile(this.folder, this.newName);
      setTimeout(() => {
        this.gridView.render();
      }, 100);
    } catch (error) {
      console.error("Failed to rename folder", error);
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.gridView) {
      this.gridView.enableKeyboardNavigation();
    }
  }
};

// src/SearchModal.ts
var import_obsidian8 = require("obsidian");
var import_obsidian9 = require("obsidian");
var SearchModal = class extends import_obsidian8.Modal {
  constructor(app, gridView, defaultQuery) {
    super(app);
    this.gridView = gridView;
    this.defaultQuery = defaultQuery;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    new import_obsidian8.Setting(contentEl).setName(t("search")).setHeading();
    if (this.gridView) {
      this.gridView.disableKeyboardNavigation();
    }
    const searchContainer = contentEl.createDiv("ge-search-container");
    const searchInput = searchContainer.createEl("input", {
      type: "text",
      value: this.defaultQuery,
      placeholder: t("search_placeholder")
    });
    const clearButton = searchContainer.createDiv("ge-search-clear-button");
    clearButton.style.display = this.defaultQuery ? "flex" : "none";
    (0, import_obsidian9.setIcon)(clearButton, "x");
    searchInput.addEventListener("input", () => {
      clearButton.style.display = searchInput.value ? "flex" : "none";
    });
    clearButton.addEventListener("click", () => {
      searchInput.value = "";
      clearButton.style.display = "none";
      searchInput.focus();
    });
    const searchOptionsContainer = contentEl.createDiv("ge-search-options-container");
    const searchScopeContainer = searchOptionsContainer.createDiv("ge-search-scope-container");
    const searchScopeCheckbox = searchScopeContainer.createEl("input", {
      type: "checkbox",
      cls: "ge-search-scope-checkbox"
    });
    searchScopeCheckbox.checked = !this.gridView.searchAllFiles;
    searchScopeContainer.createEl("span", {
      text: t("search_current_location_only"),
      cls: "ge-search-scope-label"
    });
    if (this.gridView.sourceMode === "random-note") {
      searchScopeContainer.style.display = "none";
      searchScopeCheckbox.checked = false;
    }
    const searchMediaFilesContainer = searchOptionsContainer.createDiv("ge-search-media-files-container");
    const searchMediaFilesCheckbox = searchMediaFilesContainer.createEl("input", {
      type: "checkbox",
      cls: "ge-search-media-files-checkbox"
    });
    searchMediaFilesCheckbox.checked = this.gridView.searchMediaFiles;
    searchMediaFilesContainer.createEl("span", {
      text: t("search_media_files"),
      cls: "ge-search-media-files-label"
    });
    if (!this.gridView.plugin.settings.showMediaFiles || this.gridView.sourceMode === "backlinks") {
      searchMediaFilesContainer.style.display = "none";
      searchMediaFilesCheckbox.checked = false;
      this.gridView.searchMediaFiles = false;
    }
    searchScopeContainer.addEventListener("click", (e) => {
      if (e.target !== searchScopeCheckbox) {
        searchScopeCheckbox.checked = !searchScopeCheckbox.checked;
        this.gridView.searchAllFiles = !searchScopeCheckbox.checked;
      }
    });
    searchMediaFilesContainer.addEventListener("click", (e) => {
      if (e.target !== searchMediaFilesCheckbox) {
        searchMediaFilesCheckbox.checked = !searchMediaFilesCheckbox.checked;
        this.gridView.searchMediaFiles = !searchMediaFilesCheckbox.checked;
      }
    });
    searchScopeCheckbox.addEventListener("change", () => {
      this.gridView.searchAllFiles = !searchScopeCheckbox.checked;
    });
    searchMediaFilesCheckbox.addEventListener("change", () => {
      this.gridView.searchMediaFiles = !searchMediaFilesCheckbox.checked;
    });
    const buttonContainer = contentEl.createDiv("ge-button-container");
    const searchButton = buttonContainer.createEl("button", {
      text: t("search")
    });
    const cancelButton = buttonContainer.createEl("button", {
      text: t("cancel")
    });
    const performSearch = () => {
      this.gridView.searchQuery = searchInput.value;
      this.gridView.searchAllFiles = !searchScopeCheckbox.checked;
      this.gridView.searchMediaFiles = searchMediaFilesCheckbox.checked;
      this.gridView.clearSelection();
      this.gridView.render(true);
      this.gridView.app.workspace.requestSaveLayout();
      this.close();
    };
    searchButton.addEventListener("click", performSearch);
    searchInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        performSearch();
      }
    });
    cancelButton.addEventListener("click", () => {
      this.close();
    });
    searchInput.focus();
    searchInput.setSelectionRange(searchInput.value.length, searchInput.value.length);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.gridView) {
      this.gridView.enableKeyboardNavigation();
    }
  }
};
function showSearchModal(app, gridView, defaultQuery = "") {
  new SearchModal(app, gridView, defaultQuery).open();
}

// src/FileWatcher.ts
var import_obsidian10 = require("obsidian");
var FileWatcher = class {
  constructor(plugin, gridView) {
    this.plugin = plugin;
    this.gridView = gridView;
    this.app = plugin.app;
  }
  registerFileWatcher() {
    if (!this.plugin.settings.enableFileWatcher) {
      return;
    }
    this.plugin.registerEvent(
      this.app.vault.on("create", (file) => {
        if (file instanceof import_obsidian10.TFile) {
          if (this.gridView.sourceMode === "random-note" || this.gridView.sourceMode === "bookmarks") {
            return;
          } else if (this.gridView.sourceMode === "recent-files") {
            if (isDocumentFile(file) || isMediaFile(file) && this.gridView.randomNoteIncludeMedia) {
              this.gridView.render();
            }
          } else if (this.gridView.sourceMode === "folder") {
            if (this.gridView.sourcePath && this.gridView.searchQuery === "") {
              const fileDirPath = file.path.split("/").slice(0, -1).join("/") || "/";
              if (fileDirPath === this.gridView.sourcePath) {
                this.gridView.render();
              }
            }
          } else {
            this.gridView.render();
          }
        }
      })
    );
    this.plugin.registerEvent(
      this.app.vault.on("delete", (file) => {
        if (file instanceof import_obsidian10.TFile) {
          if (this.gridView.sourceMode === "random-note" || this.gridView.sourceMode === "bookmarks") {
            return;
          } else if (this.gridView.sourceMode === "recent-files") {
            if (isDocumentFile(file) || isMediaFile(file) && this.gridView.randomNoteIncludeMedia) {
              this.gridView.render();
            }
          } else if (this.gridView.sourceMode === "folder") {
            if (this.gridView.sourcePath && this.gridView.searchQuery === "") {
              const fileDirPath = file.path.split("/").slice(0, -1).join("/") || "/";
              if (fileDirPath === this.gridView.sourcePath) {
                this.gridView.render();
              }
            }
          } else {
            this.gridView.render();
          }
        }
      })
    );
    this.plugin.registerEvent(
      this.app.vault.on("rename", (file, oldPath) => {
        if (file instanceof import_obsidian10.TFile) {
          if (this.gridView.sourceMode === "random-note") {
            return;
          } else if (this.gridView.sourceMode === "folder") {
            if (this.gridView.sourcePath && this.gridView.searchQuery === "") {
              const fileDirPath = file.path.split("/").slice(0, -1).join("/") || "/";
              const oldDirPath = oldPath.split("/").slice(0, -1).join("/") || "/";
              if (fileDirPath === this.gridView.sourcePath || oldDirPath === this.gridView.sourcePath) {
                this.gridView.render();
              }
            }
          } else {
            this.gridView.render();
          }
        }
      })
    );
    this.plugin.registerEvent(
      this.app.internalPlugins.plugins.bookmarks.instance.on("changed", () => {
        if (this.gridView.sourceMode === "bookmarks") {
          this.gridView.render();
        }
      })
    );
    this.plugin.registerEvent(
      this.app.workspace.on("file-open", (file) => {
        if (file instanceof import_obsidian10.TFile) {
          if (this.gridView.sourceMode === "backlinks" && this.gridView.searchQuery === "") {
            this.gridView.render();
          }
        }
      })
    );
  }
};

// src/FloatingAudioPlayer.ts
var import_obsidian11 = require("obsidian");
var _FloatingAudioPlayer = class {
  constructor(app, file) {
    this.isDragging = false;
    this.offsetX = 0;
    this.offsetY = 0;
    this.isTouchEvent = false;
    this.app = app;
    this.currentFile = file;
    this.boundHandleDragStartMouse = this.handleDragStartMouse.bind(this);
    this.boundHandleDragStartTouch = this.handleDragStartTouch.bind(this);
    this.boundHandleDragMoveMouse = this.handleDragMoveMouse.bind(this);
    this.boundHandleDragMoveTouch = this.handleDragMoveTouch.bind(this);
    this.boundHandleDragEndMouse = this.handleDragEndMouse.bind(this);
    this.boundHandleDragEndTouch = this.handleDragEndTouch.bind(this);
    this.boundClose = this.close.bind(this);
    this.buildUI();
    this.setupDragEvents();
  }
  // --- 靜態方法：開啟或取得播放器 ---
  static open(app, file) {
    if (_FloatingAudioPlayer.players.has(file.path)) {
      const existingPlayer = _FloatingAudioPlayer.players.get(file.path);
      existingPlayer.focus();
      return existingPlayer;
    }
    if (_FloatingAudioPlayer.players.size > 0) {
      const firstPlayer = _FloatingAudioPlayer.players.values().next().value;
      firstPlayer.updatePlayer(file);
      firstPlayer.focus();
      return firstPlayer;
    }
    const newPlayer = new _FloatingAudioPlayer(app, file);
    _FloatingAudioPlayer.players.set(file.path, newPlayer);
    newPlayer.show();
    return newPlayer;
  }
  // --- Private UI 和事件設定方法 ---
  buildUI() {
    this.containerEl = document.createElement("div");
    this.containerEl.className = "ge-floating-audio-player";
    this.containerEl.setAttribute("data-file", this.currentFile.path);
    this.audioEl = document.createElement("audio");
    this.audioEl.controls = true;
    this.audioEl.src = this.app.vault.getResourcePath(this.currentFile);
    this.titleEl = document.createElement("div");
    this.titleEl.className = "ge-audio-title";
    this.titleEl.textContent = this.currentFile.basename;
    this.closeButtonEl = document.createElement("div");
    this.closeButtonEl.className = "ge-audio-close-button";
    (0, import_obsidian11.setIcon)(this.closeButtonEl, "x");
    this.closeButtonEl.addEventListener("click", this.boundClose);
    this.handleEl = document.createElement("div");
    this.handleEl.className = "ge-audio-handle";
    this.containerEl.appendChild(this.handleEl);
    this.containerEl.appendChild(this.titleEl);
    this.containerEl.appendChild(this.audioEl);
    this.containerEl.appendChild(this.closeButtonEl);
  }
  setupDragEvents() {
    this.handleEl.addEventListener("mousedown", this.boundHandleDragStartMouse);
    this.handleEl.addEventListener("touchstart", this.boundHandleDragStartTouch, { passive: true });
    document.addEventListener("mousemove", this.boundHandleDragMoveMouse);
    document.addEventListener("touchmove", this.boundHandleDragMoveTouch, { passive: false });
    document.addEventListener("mouseup", this.boundHandleDragEndMouse);
    document.addEventListener("touchend", this.boundHandleDragEndTouch);
  }
  removeDragEvents() {
    this.handleEl.removeEventListener("mousedown", this.boundHandleDragStartMouse);
    this.handleEl.removeEventListener("touchstart", this.boundHandleDragStartTouch);
    document.removeEventListener("mousemove", this.boundHandleDragMoveMouse);
    document.removeEventListener("touchmove", this.boundHandleDragMoveTouch);
    document.removeEventListener("mouseup", this.boundHandleDragEndMouse);
    document.removeEventListener("touchend", this.boundHandleDragEndTouch);
  }
  // --- Private 事件處理器 ---
  handleDragStartMouse(e) {
    if (this.isTouchEvent)
      return;
    this.isDragging = true;
    this.offsetX = e.clientX - this.containerEl.getBoundingClientRect().left;
    this.offsetY = e.clientY - this.containerEl.getBoundingClientRect().top;
    this.containerEl.classList.add("ge-audio-dragging");
  }
  handleDragStartTouch(e) {
    this.isTouchEvent = true;
    this.isDragging = true;
    const touch = e.touches[0];
    this.offsetX = touch.clientX - this.containerEl.getBoundingClientRect().left;
    this.offsetY = touch.clientY - this.containerEl.getBoundingClientRect().top;
    this.containerEl.classList.add("ge-audio-dragging");
  }
  handleDragMoveMouse(e) {
    if (!this.isDragging || this.isTouchEvent)
      return;
    this.movePlayer(e.clientX, e.clientY);
  }
  handleDragMoveTouch(e) {
    if (!this.isDragging)
      return;
    const touch = e.touches[0];
    this.movePlayer(touch.clientX, touch.clientY);
    e.preventDefault();
  }
  handleDragEndMouse() {
    if (this.isTouchEvent)
      return;
    this.isDragging = false;
    this.containerEl.classList.remove("ge-audio-dragging");
  }
  handleDragEndTouch() {
    this.isDragging = false;
    this.isTouchEvent = false;
    this.containerEl.classList.remove("ge-audio-dragging");
  }
  movePlayer(clientX, clientY) {
    const x = clientX - this.offsetX;
    const y = clientY - this.offsetY;
    this.containerEl.style.left = `${x}px`;
    this.containerEl.style.top = `${y}px`;
  }
  // --- Public 方法 ---
  show() {
    document.body.appendChild(this.containerEl);
    const rect = this.containerEl.getBoundingClientRect();
    this.containerEl.style.left = `${window.innerWidth - rect.width - 20}px`;
    this.containerEl.style.top = `${window.innerHeight - rect.height - 20}px`;
    this.audioEl.play();
  }
  close() {
    this.removeDragEvents();
    this.containerEl.remove();
    _FloatingAudioPlayer.players.delete(this.currentFile.path);
  }
  focus() {
    this.containerEl.scrollIntoView({ behavior: "smooth", block: "center" });
    this.containerEl.style.transition = "box-shadow 0.1s ease-in-out";
    this.containerEl.style.boxShadow = "0 0 10px 2px var(--interactive-accent)";
    setTimeout(() => {
      this.containerEl.style.boxShadow = "";
    }, 300);
  }
  // 更新播放器以播放新檔案
  updatePlayer(newFile) {
    _FloatingAudioPlayer.players.delete(this.currentFile.path);
    this.currentFile = newFile;
    _FloatingAudioPlayer.players.set(this.currentFile.path, this);
    this.containerEl.setAttribute("data-file", this.currentFile.path);
    this.audioEl.src = this.app.vault.getResourcePath(this.currentFile);
    this.titleEl.textContent = this.currentFile.basename;
    this.audioEl.play();
  }
};
var FloatingAudioPlayer = _FloatingAudioPlayer;
// 使用靜態 Map 來追蹤已開啟的播放器實例 (以檔案路徑為 key)
FloatingAudioPlayer.players = /* @__PURE__ */ new Map();

// src/GridView.ts
var GridView = class extends import_obsidian12.ItemView {
  // 歷史記錄
  constructor(leaf, plugin) {
    super(leaf);
    // 隨機筆記是否包含圖片和影片
    this.selectedItemIndex = -1;
    // 當前選中的項目索引
    this.selectedItems = /* @__PURE__ */ new Set();
    // 存儲多選的項目索引
    this.gridItems = [];
    // 存儲所有網格項目的引用
    this.hasKeyboardFocus = false;
    // 是否有鍵盤焦點
    this.keyboardNavigationEnabled = true;
    this.recentSources = [];
    this.plugin = plugin;
    this.containerEl.addClass("ge-grid-view-container");
    this.sourceMode = "";
    this.sourcePath = "";
    this.sortType = this.plugin.settings.defaultSortType;
    this.folderSortType = "";
    this.searchQuery = "";
    this.searchAllFiles = true;
    this.searchMediaFiles = false;
    this.randomNoteIncludeMedia = false;
    if (this.plugin.settings.enableFileWatcher) {
      this.fileWatcher = new FileWatcher(plugin, this);
      this.fileWatcher.registerFileWatcher();
    }
    this.registerDomEvent(document, "keydown", (event) => {
      if (this.app.workspace.getActiveViewOfType(GridView) === this) {
        this.handleKeyDown(event);
      }
    });
  }
  getViewType() {
    return "grid-view";
  }
  getIcon() {
    if (this.sourceMode === "bookmarks") {
      return "bookmark";
    } else if (this.sourceMode === "search") {
      return "search";
    } else if (this.sourceMode === "backlinks") {
      return "paperclip";
    } else if (this.sourceMode === "random-note") {
      return "dice";
    } else if (this.sourceMode === "recent-files") {
      return "calendar-days";
    } else if (this.sourceMode === "all-files") {
      return "book-text";
    } else if (this.sourceMode === "folder") {
      return "folder";
    } else {
      return "grid";
    }
  }
  getDisplayText() {
    if (this.sourceMode === "") {
      return t("grid_view_title");
    } else if (this.sourceMode === "bookmarks") {
      return t("bookmarks_mode");
    } else if (this.sourceMode === "search") {
      return t("search_results");
    } else if (this.sourceMode === "backlinks") {
      return t("backlinks_mode");
    } else if (this.sourceMode === "random-note") {
      return t("random_note_mode");
    } else if (this.sourceMode === "recent-files") {
      return t("recent_files_mode");
    } else if (this.sourceMode === "all-files") {
      return t("all_files_mode");
    } else if (this.sourceMode === "folder") {
      return this.sourcePath;
    } else {
      return "";
    }
  }
  async setSource(mode, path = "", resetScroll = false, recordHistory = true) {
    var _a;
    if (this.sourceMode && recordHistory) {
      const previousState = JSON.stringify({ mode: this.sourceMode, path: this.sourcePath });
      this.recentSources.unshift(previousState);
      if (this.recentSources.length > 10) {
        this.recentSources = this.recentSources.slice(0, 10);
      }
    }
    this.folderSortType = "";
    if (mode === "folder") {
      const folderName = path.split("/").pop() || "";
      const mdFilePath = `${path}/${folderName}.md`;
      const mdFile = this.app.vault.getAbstractFileByPath(mdFilePath);
      if (mdFile instanceof import_obsidian12.TFile) {
        const metadata = (_a = this.app.metadataCache.getFileCache(mdFile)) == null ? void 0 : _a.frontmatter;
        this.folderSortType = metadata == null ? void 0 : metadata.sort;
      }
    }
    this.sourceMode = mode;
    this.sourcePath = path;
    this.render(resetScroll);
    this.app.workspace.requestSaveLayout();
  }
  async render(resetScroll = false) {
    const scrollContainer = this.containerEl.children[1];
    const scrollTop = resetScroll ? 0 : scrollContainer ? scrollContainer.scrollTop : 0;
    let selectedFilePath = null;
    if (this.selectedItemIndex >= 0 && this.selectedItemIndex < this.gridItems.length) {
      const selectedItem = this.gridItems[this.selectedItemIndex];
      selectedFilePath = selectedItem.dataset.filePath || null;
    }
    this.containerEl.empty();
    const headerButtonsDiv = this.containerEl.createDiv("ge-header-buttons");
    headerButtonsDiv.addEventListener("click", (event) => {
      if (event.target === headerButtonsDiv) {
        event.preventDefault();
        const gridContainer = this.containerEl.querySelector(".ge-grid-container");
        if (gridContainer) {
          gridContainer.scrollTo({
            top: 0,
            behavior: "smooth"
          });
        }
      }
    });
    headerButtonsDiv.addEventListener("contextmenu", (event) => {
      if (event.target === headerButtonsDiv) {
        event.preventDefault();
        const menu = new import_obsidian12.Menu();
        menu.addItem((item) => {
          item.setTitle(t("open_new_grid_view")).setIcon("grid").onClick(() => {
            const { workspace } = this.app;
            let leaf = null;
            workspace.getLeavesOfType("grid-view");
            switch (this.plugin.settings.defaultOpenLocation) {
              case "left":
                leaf = workspace.getLeftLeaf(false);
                break;
              case "right":
                leaf = workspace.getRightLeaf(false);
                break;
              case "tab":
              default:
                leaf = workspace.getLeaf("tab");
                break;
            }
            if (!leaf) {
              leaf = workspace.getLeaf("tab");
            }
            leaf.setViewState({ type: "grid-view", active: true });
            if (leaf.view instanceof GridView) {
              leaf.view.setSource("folder", "/");
            }
            workspace.revealLeaf(leaf);
          });
        });
        menu.addItem((item) => {
          item.setTitle(t("open_settings")).setIcon("settings").onClick(() => {
            this.app.setting.open();
            this.app.setting.openTabById(this.plugin.manifest.id);
          });
        });
        menu.showAtMouseEvent(event);
      }
    });
    const newNoteButton = headerButtonsDiv.createEl("button", { attr: { "aria-label": t("new_note") } });
    newNoteButton.addEventListener("click", async () => {
      let newFileName = `${t("untitled")}.md`;
      let newFilePath = !this.sourcePath || this.sourcePath === "/" ? newFileName : `${this.sourcePath}/${newFileName}`;
      let counter = 1;
      while (this.app.vault.getAbstractFileByPath(newFilePath)) {
        newFileName = `${t("untitled")} ${counter}.md`;
        newFilePath = !this.sourcePath || this.sourcePath === "/" ? newFileName : `${this.sourcePath}/${newFileName}`;
        counter++;
      }
      try {
        const newFile = await this.app.vault.create(newFilePath, "");
        await this.app.workspace.getLeaf().openFile(newFile);
      } catch (error) {
        console.error("An error occurred while creating a new note:", error);
      }
    });
    (0, import_obsidian13.setIcon)(newNoteButton, "square-pen");
    newNoteButton.addEventListener("contextmenu", (event) => {
      event.preventDefault();
      const menu = new import_obsidian12.Menu();
      menu.addItem((item) => {
        item.setTitle(t("new_note")).setIcon("square-pen").onClick(async () => {
          let newFileName = `${t("untitled")}.md`;
          let newFilePath = !this.sourcePath || this.sourcePath === "/" ? newFileName : `${this.sourcePath}/${newFileName}`;
          let counter = 1;
          while (this.app.vault.getAbstractFileByPath(newFilePath)) {
            newFileName = `${t("untitled")} ${counter}.md`;
            newFilePath = !this.sourcePath || this.sourcePath === "/" ? newFileName : `${this.sourcePath}/${newFileName}`;
            counter++;
          }
          try {
            const newFile = await this.app.vault.create(newFilePath, "");
            await this.app.workspace.getLeaf().openFile(newFile);
          } catch (error) {
            console.error("An error occurred while creating a new note:", error);
          }
        });
      });
      menu.addItem((item) => {
        item.setTitle(t("new_folder")).setIcon("folder").onClick(async () => {
          let newFolderName = `${t("untitled")}`;
          let newFolderPath = !this.sourcePath || this.sourcePath === "/" ? newFolderName : `${this.sourcePath}/${newFolderName}`;
          let counter = 1;
          while (this.app.vault.getAbstractFileByPath(newFolderPath)) {
            newFolderName = `${t("untitled")} ${counter}`;
            newFolderPath = !this.sourcePath || this.sourcePath === "/" ? newFolderName : `${this.sourcePath}/${newFolderName}`;
            counter++;
          }
          try {
            await this.app.vault.createFolder(newFolderPath);
            this.render(false);
          } catch (error) {
            console.error("An error occurred while creating a new folder:", error);
          }
        });
      });
      menu.showAtMouseEvent(event);
    });
    if (this.sourceMode === "folder" && this.sourcePath !== "/" && this.searchQuery === "") {
      const upButton = headerButtonsDiv.createEl("button", { attr: { "aria-label": t("go_up") } });
      upButton.addEventListener("click", () => {
        const parentPath = this.sourcePath.split("/").slice(0, -1).join("/") || "/";
        this.setSource("folder", parentPath, true);
        this.clearSelection();
      });
      (0, import_obsidian13.setIcon)(upButton, "arrow-up");
      if (import_obsidian12.Platform.isDesktop) {
        upButton.addEventListener("dragover", (event) => {
          event.preventDefault();
          event.dataTransfer.dropEffect = "move";
          upButton.addClass("ge-dragover");
        });
        upButton.addEventListener("dragleave", () => {
          upButton.removeClass("ge-dragover");
        });
        upButton.addEventListener("drop", async (event) => {
          var _a, _b;
          event.preventDefault();
          upButton.removeClass("ge-dragover");
          const parentPath = this.sourcePath.split("/").slice(0, -1).join("/") || "/";
          if (!parentPath)
            return;
          const folder = this.app.vault.getAbstractFileByPath(parentPath);
          if (!(folder instanceof import_obsidian12.TFolder))
            return;
          const filesData = (_a = event.dataTransfer) == null ? void 0 : _a.getData("application/obsidian-grid-explorer-files");
          if (filesData) {
            try {
              const filePaths = JSON.parse(filesData);
              for (const filePath2 of filePaths) {
                const file2 = this.app.vault.getAbstractFileByPath(filePath2);
                if (file2 instanceof import_obsidian12.TFile) {
                  const newPath = `${parentPath}/${file2.name}`;
                  await this.app.fileManager.renameFile(file2, newPath);
                }
              }
              this.render();
            } catch (error) {
              console.error("An error occurred while moving multiple files to parent folder:", error);
            }
            return;
          }
          const filePath = (_b = event.dataTransfer) == null ? void 0 : _b.getData("text/plain");
          if (!filePath)
            return;
          const cleanedFilePath = filePath.replace(/!?\[\[(.*?)\]\]/, "$1");
          const file = this.app.vault.getAbstractFileByPath(cleanedFilePath);
          if (file instanceof import_obsidian12.TFile) {
            try {
              const newPath = `${parentPath}/${file.name}`;
              await this.app.fileManager.renameFile(file, newPath);
              this.render();
            } catch (error) {
              console.error("An error occurred while moving the file to parent folder:", error);
            }
          }
        });
      }
    }
    const reselectButton = headerButtonsDiv.createEl("button", { attr: { "aria-label": t("reselect") } });
    reselectButton.addEventListener("click", () => {
      showFolderSelectionModal(this.app, this.plugin, this);
    });
    (0, import_obsidian13.setIcon)(reselectButton, "grid");
    reselectButton.addEventListener("contextmenu", (event) => {
      if (this.recentSources.length > 0) {
        event.preventDefault();
        const menu = new import_obsidian12.Menu();
        this.recentSources.forEach((sourceInfoStr, index) => {
          try {
            const sourceInfo = JSON.parse(sourceInfoStr);
            const { mode, path } = sourceInfo;
            let displayText = "";
            let icon = "";
            switch (mode) {
              case "folder":
                displayText = path || "/";
                icon = "folder";
                break;
              case "bookmarks":
                displayText = t("bookmarks_mode");
                icon = "bookmark";
                break;
              case "search":
                displayText = t("search_results");
                icon = "search";
                break;
              case "backlinks":
                displayText = t("backlinks_mode");
                icon = "paperclip";
                break;
              case "recent-files":
                displayText = t("recent_files_mode");
                icon = "calendar-days";
                break;
              case "all-files":
                displayText = t("all_files_mode");
                icon = "book-text";
                break;
              case "random-note":
                displayText = t("random_note_mode");
                icon = "dice";
                break;
              default:
                displayText = mode;
                icon = "grid";
            }
            menu.addItem((item) => {
              item.setTitle(`${displayText}`).setIcon(`${icon}`).onClick(() => {
                const clickedIndex = this.recentSources.findIndex((source) => {
                  const parsed = JSON.parse(source);
                  return parsed.mode === mode && parsed.path === path;
                });
                if (clickedIndex !== -1) {
                  this.recentSources = this.recentSources.slice(clickedIndex + 1);
                }
                this.setSource(mode, path, true, false);
              });
            });
          } catch (error) {
            console.error("Failed to parse source info:", error);
          }
        });
        menu.showAtMouseEvent(event);
      }
    });
    const refreshButton = headerButtonsDiv.createEl("button", { attr: { "aria-label": t("refresh") } });
    refreshButton.addEventListener("click", () => {
      if (this.sortType === "random") {
        this.clearSelection();
      }
      this.render();
    });
    (0, import_obsidian13.setIcon)(refreshButton, "refresh-ccw");
    if (this.sourceMode !== "bookmarks" && this.sourceMode !== "recent-files" && this.sourceMode !== "random-note") {
      const sortButton = headerButtonsDiv.createEl("button", { attr: { "aria-label": t("sorting") } });
      sortButton.addEventListener("click", (evt) => {
        const menu = new import_obsidian12.Menu();
        const sortOptions = [
          { value: "name-asc", label: t("sort_name_asc"), icon: "a-arrow-up" },
          { value: "name-desc", label: t("sort_name_desc"), icon: "a-arrow-down" },
          { value: "mtime-desc", label: t("sort_mtime_desc"), icon: "clock" },
          { value: "mtime-asc", label: t("sort_mtime_asc"), icon: "clock" },
          { value: "ctime-desc", label: t("sort_ctime_desc"), icon: "calendar" },
          { value: "ctime-asc", label: t("sort_ctime_asc"), icon: "calendar" },
          { value: "random", label: t("sort_random"), icon: "dice" }
        ];
        sortOptions.forEach((option) => {
          menu.addItem((item) => {
            item.setTitle(option.label).setIcon(option.icon).setChecked((this.folderSortType || this.sortType) === option.value).onClick(() => {
              this.sortType = option.value;
              this.folderSortType = "";
              this.render();
              this.app.workspace.requestSaveLayout();
            });
          });
        });
        menu.showAtMouseEvent(evt);
      });
      (0, import_obsidian13.setIcon)(sortButton, "arrow-up-narrow-wide");
    }
    const searchButtonContainer = headerButtonsDiv.createDiv("ge-search-button-container");
    const searchButton = searchButtonContainer.createEl("button", {
      cls: "search-button",
      attr: { "aria-label": t("search") }
    });
    (0, import_obsidian13.setIcon)(searchButton, "search");
    searchButton.addEventListener("click", () => {
      showSearchModal(this.app, this, "");
    });
    if (this.searchQuery) {
      searchButton.style.display = "none";
      const searchTextContainer = searchButtonContainer.createDiv("ge-search-text-container");
      const searchText = searchTextContainer.createEl("span", { cls: "ge-search-text", text: this.searchQuery });
      searchText.style.cursor = "pointer";
      searchText.addEventListener("click", () => {
        showSearchModal(this.app, this, this.searchQuery);
      });
      const clearButton = searchTextContainer.createDiv("ge-clear-button");
      (0, import_obsidian13.setIcon)(clearButton, "x");
      clearButton.addEventListener("click", (e) => {
        e.stopPropagation();
        this.searchQuery = "";
        this.clearSelection();
        this.render();
        this.app.workspace.requestSaveLayout();
      });
    }
    if ((this.sourceMode === "all-files" || this.sourceMode === "recent-files" || this.sourceMode === "random-note") && this.plugin.settings.showMediaFiles && this.searchQuery === "") {
      const randomNoteSettingsButton = headerButtonsDiv.createEl("button", {
        attr: { "aria-label": this.randomNoteIncludeMedia ? t("random_note_include_media_files") : t("random_note_notes_only") }
      });
      this.randomNoteIncludeMedia ? (0, import_obsidian13.setIcon)(randomNoteSettingsButton, "file-image") : (0, import_obsidian13.setIcon)(randomNoteSettingsButton, "file-text");
      const menu = new import_obsidian12.Menu();
      menu.addItem((item) => {
        item.setTitle(t("random_note_notes_only")).setIcon("file-text").setChecked(!this.randomNoteIncludeMedia).onClick(() => {
          this.randomNoteIncludeMedia = false;
          randomNoteSettingsButton.textContent = t("random_note_notes_only");
          (0, import_obsidian13.setIcon)(randomNoteSettingsButton, "file-text");
          this.render();
        });
      });
      menu.addItem((item) => {
        item.setTitle(t("random_note_include_media_files")).setIcon("file-image").setChecked(this.randomNoteIncludeMedia).onClick(() => {
          this.randomNoteIncludeMedia = true;
          randomNoteSettingsButton.textContent = t("random_note_include_media_files");
          (0, import_obsidian13.setIcon)(randomNoteSettingsButton, "file-image");
          this.render();
        });
      });
      randomNoteSettingsButton.addEventListener("click", (event) => {
        menu.showAtMouseEvent(event);
      });
    }
    const contentEl = this.containerEl.createDiv("view-content");
    await this.grid_render();
    this.leaf.updateHeader();
    if (scrollContainer && !resetScroll) {
      contentEl.scrollTop = scrollTop;
    }
    if (selectedFilePath && this.hasKeyboardFocus) {
      const newIndex = this.gridItems.findIndex((item) => item.dataset.filePath === selectedFilePath);
      if (newIndex >= 0) {
        this.selectItem(newIndex);
      }
    }
  }
  async grid_render() {
    var _a, _b;
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("ge-grid-container");
    container.style.setProperty("--grid-item-width", this.plugin.settings.gridItemWidth + "px");
    if (this.plugin.settings.gridItemHeight === 0) {
      container.style.setProperty("--grid-item-height", "100%");
    } else {
      container.style.setProperty("--grid-item-height", this.plugin.settings.gridItemHeight + "px");
    }
    container.style.setProperty("--image-area-width", this.plugin.settings.imageAreaWidth + "px");
    container.style.setProperty("--image-area-height", this.plugin.settings.imageAreaHeight + "px");
    container.style.setProperty("--title-font-size", this.plugin.settings.titleFontSize + "em");
    container.addEventListener("click", (event) => {
      if (event.target === container) {
        this.clearSelection();
        this.hasKeyboardFocus = false;
      }
    });
    this.gridItems = [];
    if (this.sourceMode === "bookmarks" && !((_a = this.app.internalPlugins.plugins.bookmarks) == null ? void 0 : _a.enabled)) {
      new import_obsidian12.Notice(t("bookmarks_plugin_disabled"));
      return;
    }
    if (this.sourceMode === "backlinks" && !this.app.workspace.getActiveFile()) {
      const noFilesDiv = container.createDiv("ge-no-files");
      noFilesDiv.setText(t("no_backlinks"));
      if (this.plugin.statusBarItem) {
        this.plugin.statusBarItem.setText("");
      }
      return;
    }
    if (this.sourceMode === "folder" && this.searchQuery === "" && this.plugin.settings.showParentFolderItem && this.sourcePath !== "/") {
      const parentFolderEl = container.createDiv("ge-grid-item ge-folder-item");
      this.gridItems.push(parentFolderEl);
      const parentPath = this.sourcePath.split("/").slice(0, -1).join("/") || "/";
      parentFolderEl.dataset.folderPath = parentPath;
      const contentArea = parentFolderEl.createDiv("ge-content-area");
      const titleContainer = contentArea.createDiv("ge-title-container");
      titleContainer.createEl("span", { cls: "ge-title", text: `\u{1F4C1} ..` });
      parentFolderEl.addEventListener("click", () => {
        this.setSource("folder", parentPath, true);
        this.clearSelection();
      });
    }
    if (this.sourceMode === "folder" && this.searchQuery === "") {
      const currentFolder = this.app.vault.getAbstractFileByPath(this.sourcePath || "/");
      if (currentFolder instanceof import_obsidian12.TFolder) {
        const subfolders = currentFolder.children.filter((child) => {
          if (!(child instanceof import_obsidian12.TFolder))
            return false;
          const isInIgnoredFolders = this.plugin.settings.ignoredFolders.some(
            (folder) => child.path === folder || child.path.startsWith(folder + "/")
          );
          if (isInIgnoredFolders) {
            return false;
          }
          if (this.plugin.settings.ignoredFolderPatterns && this.plugin.settings.ignoredFolderPatterns.length > 0) {
            const matchesIgnoredPattern = this.plugin.settings.ignoredFolderPatterns.some((pattern) => {
              try {
                if (/[\^\$\*\+\?\(\)\[\]\{\}\|\\]/.test(pattern)) {
                  const regex = new RegExp(pattern);
                  return regex.test(child.path);
                } else {
                  return child.name.toLowerCase().includes(pattern.toLowerCase());
                }
              } catch (error) {
                return child.name.toLowerCase().includes(pattern.toLowerCase());
              }
            });
            if (matchesIgnoredPattern) {
              return false;
            }
          }
          return true;
        }).sort((a, b) => a.name.localeCompare(b.name));
        for (const folder of subfolders) {
          const folderEl = container.createDiv("ge-grid-item ge-folder-item");
          this.gridItems.push(folderEl);
          folderEl.dataset.folderPath = folder.path;
          const contentArea = folderEl.createDiv("ge-content-area");
          const titleContainer = contentArea.createDiv("ge-title-container");
          titleContainer.createEl("span", { cls: "ge-title", text: `\u{1F4C1} ${folder.name}` });
          titleContainer.setAttribute("title", folder.name);
          const notePath = `${folder.path}/${folder.name}.md`;
          const noteFile = this.app.vault.getAbstractFileByPath(notePath);
          if (noteFile instanceof import_obsidian12.TFile) {
            const noteIcon = titleContainer.createEl("span", {
              cls: "ge-note-button"
            });
            (0, import_obsidian13.setIcon)(noteIcon, "panel-left-open");
            noteIcon.addEventListener("click", (e) => {
              e.stopPropagation();
              this.app.workspace.getLeaf().openFile(noteFile);
            });
            const metadata = (_b = this.app.metadataCache.getFileCache(noteFile)) == null ? void 0 : _b.frontmatter;
            const colorValue = metadata == null ? void 0 : metadata.color;
            if (colorValue) {
              folderEl.setAttribute("style", `
                                background-color: rgba(var(--color-${colorValue}-rgb), 0.2);
                                border-color: rgba(var(--color-${colorValue}-rgb), 0.5);
                            `);
            }
          }
          folderEl.addEventListener("click", () => {
            this.setSource("folder", folder.path, true);
            this.clearSelection();
          });
          folderEl.addEventListener("contextmenu", (event) => {
            event.preventDefault();
            const menu = new import_obsidian12.Menu();
            const notePath2 = `${folder.path}/${folder.name}.md`;
            let noteFile2 = this.app.vault.getAbstractFileByPath(notePath2);
            if (noteFile2 instanceof import_obsidian12.TFile) {
              menu.addItem((item) => {
                item.setTitle(t("open_folder_note")).setIcon("panel-left-open").onClick(() => {
                  this.app.workspace.getLeaf().openFile(noteFile2);
                });
              });
              menu.addItem((item) => {
                item.setTitle(t("edit_folder_note_settings")).setIcon("settings-2").onClick(() => {
                  if (folder instanceof import_obsidian12.TFolder) {
                    showFolderNoteSettingsModal(this.app, this.plugin, folder);
                  }
                });
              });
              menu.addItem((item) => {
                item.setTitle(t("delete_folder_note")).setIcon("folder-x").onClick(() => {
                  this.app.fileManager.trashFile(noteFile2);
                  setTimeout(() => {
                    this.render();
                  }, 100);
                });
              });
            } else {
              menu.addItem((item) => {
                item.setTitle(t("create_folder_note")).setIcon("file-cog").onClick(() => {
                  if (folder instanceof import_obsidian12.TFolder) {
                    showFolderNoteSettingsModal(this.app, this.plugin, folder);
                  }
                });
              });
            }
            menu.addItem((item) => {
              item.setTitle(t("ignore_folder")).setIcon("x").onClick(() => {
                this.plugin.settings.ignoredFolders.push(folder.path);
                this.plugin.saveSettings();
              });
            });
            menu.addItem((item) => {
              item.setTitle(t("rename_folder")).setIcon("file-cog").onClick(() => {
                if (folder instanceof import_obsidian12.TFolder) {
                  showFolderRenameModal(this.app, this.plugin, folder, this);
                }
              });
            });
            menu.addItem((item) => {
              item.setWarning(true);
              item.setTitle(t("delete_folder")).setIcon("trash").onClick(async () => {
                if (folder instanceof import_obsidian12.TFolder) {
                  await this.app.fileManager.trashFile(folder);
                  setTimeout(() => {
                    this.render();
                  }, 100);
                }
              });
            });
            menu.showAtMouseEvent(event);
          });
        }
      }
    }
    let files = [];
    let fileIndexMap = /* @__PURE__ */ new Map();
    if (this.searchQuery) {
      const loadingDiv = container.createDiv("ge-loading-indicator");
      loadingDiv.setText(t("searching"));
      let allFiles = [];
      if (this.searchAllFiles) {
        allFiles = this.app.vault.getFiles().filter(
          (file) => isDocumentFile(file) || isMediaFile(file) && this.searchMediaFiles
        );
      } else {
        const randomNoteIncludeMedia = this.randomNoteIncludeMedia;
        this.randomNoteIncludeMedia = this.searchMediaFiles;
        allFiles = await getFiles(this);
        this.randomNoteIncludeMedia = randomNoteIncludeMedia;
        if (this.sourceMode === "recent-files") {
          allFiles = ignoredFiles(allFiles, this).slice(0, this.plugin.settings.recentFilesCount);
        } else if (this.sourceMode === "bookmarks") {
          allFiles = allFiles.filter(
            (file) => isDocumentFile(file) || isMediaFile(file) && this.searchMediaFiles
          );
          allFiles.forEach((file, index) => {
            fileIndexMap.set(file, index);
          });
        } else if (this.sourceMode === "search") {
          allFiles = allFiles.filter(
            (file) => isDocumentFile(file) || isMediaFile(file) && this.searchMediaFiles
          );
        }
      }
      const searchTerms = this.searchQuery.toLowerCase().split(/\s+/).filter((term) => term.trim() !== "");
      await Promise.all(
        allFiles.map(async (file) => {
          const fileName = file.name.toLowerCase();
          const matchesFileName = searchTerms.every((term) => fileName.includes(term));
          if (matchesFileName) {
            files.push(file);
          } else if (file.extension === "md") {
            const content = (await this.app.vault.cachedRead(file)).toLowerCase();
            const matchesContent = searchTerms.every((term) => content.includes(term));
            if (matchesContent) {
              files.push(file);
            }
          }
        })
      );
      if (this.sourceMode === "recent-files") {
        const sortType = this.sortType;
        this.sortType = "mtime-desc";
        files = sortFiles(files, this);
        this.sortType = sortType;
      } else if (this.sourceMode === "bookmarks") {
        files.sort((a, b) => {
          var _a2, _b2;
          const indexA = (_a2 = fileIndexMap.get(a)) != null ? _a2 : Number.MAX_SAFE_INTEGER;
          const indexB = (_b2 = fileIndexMap.get(b)) != null ? _b2 : Number.MAX_SAFE_INTEGER;
          return indexA - indexB;
        });
      } else if (this.sourceMode === "random-note") {
        const sortType = this.sortType;
        this.sortType = "random";
        files = sortFiles(files, this);
        this.sortType = sortType;
      } else {
        files = sortFiles(files, this);
      }
      files = ignoredFiles(files, this);
      loadingDiv.remove();
    } else {
      files = await getFiles(this);
      files = ignoredFiles(files, this);
      if (this.sourceMode === "recent-files") {
        files = files.slice(0, this.plugin.settings.recentFilesCount);
      }
      if (this.sourceMode === "random-note") {
        files = files.slice(0, this.plugin.settings.randomNoteCount);
      }
    }
    if (files.length === 0) {
      const noFilesDiv = container.createDiv("ge-no-files");
      if (this.sourceMode !== "backlinks") {
        noFilesDiv.setText(t("no_files"));
      } else {
        noFilesDiv.setText(t("no_backlinks"));
      }
      if (this.plugin.statusBarItem) {
        this.plugin.statusBarItem.setText("");
      }
      return;
    }
    const observer = new IntersectionObserver((entries, observer2) => {
      entries.forEach(async (entry) => {
        var _a2, _b2;
        if (entry.isIntersecting) {
          const fileEl = entry.target;
          const filePath = fileEl.dataset.filePath;
          if (!filePath)
            return;
          const file = this.app.vault.getAbstractFileByPath(filePath);
          if (!(file instanceof import_obsidian12.TFile))
            return;
          let imageUrl = "";
          const contentArea = fileEl.querySelector(".ge-content-area");
          if (!contentArea.hasAttribute("data-loaded")) {
            if (file.extension === "md") {
              let summaryLength = this.plugin.settings.summaryLength;
              if (summaryLength < 50) {
                summaryLength = 100;
                this.plugin.settings.summaryLength = 100;
                this.plugin.saveSettings();
              }
              const content = await this.app.vault.cachedRead(file);
              const frontMatterInfo = (0, import_obsidian13.getFrontMatterInfo)(content);
              let contentWithoutFrontmatter = "";
              if (summaryLength < 500) {
                contentWithoutFrontmatter = content.substring(frontMatterInfo.contentStart).slice(0, 500);
              } else {
                contentWithoutFrontmatter = content.substring(frontMatterInfo.contentStart).slice(0, summaryLength + summaryLength);
              }
              let contentWithoutMediaLinks = contentWithoutFrontmatter.replace(/```[\s\S]*?```\n|<!--[\s\S]*?-->|!?(?:\[[^\]]*\]\([^)]+\)|\[\[[^\]]+\]\])/g, "");
              contentWithoutMediaLinks = contentWithoutMediaLinks.replace(/```[\s\S]*$/, "").trim();
              if (contentWithoutMediaLinks.startsWith("# ") || contentWithoutMediaLinks.startsWith("## ") || contentWithoutMediaLinks.startsWith("### ")) {
                contentWithoutMediaLinks = contentWithoutMediaLinks.split("\n").slice(1).join("\n");
              }
              const preview = contentWithoutMediaLinks.slice(0, summaryLength) + (contentWithoutMediaLinks.length > summaryLength ? "..." : "");
              const pEl = contentArea.createEl("p", { text: preview.trim() });
              if (frontMatterInfo.exists) {
                const metadata = (_a2 = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a2.frontmatter;
                const colorValue = metadata == null ? void 0 : metadata.color;
                if (colorValue) {
                  fileEl.setAttribute("style", `
                                        background-color: rgba(var(--color-${colorValue}-rgb), 0.2);
                                        border-color: rgba(var(--color-${colorValue}-rgb), 0.5);
                                    `);
                  pEl.style.color = `rgba(var(--color-${colorValue}-rgb), 0.7)`;
                }
              }
              imageUrl = await findFirstImageInNote(this.app, content);
            } else {
              contentArea.createEl("p", { text: file.extension.toUpperCase() });
            }
            if (file.extension === "md" && this.plugin.settings.showNoteTags) {
              const fileCache = this.app.metadataCache.getFileCache(file);
              const allTags = /* @__PURE__ */ new Set();
              let frontmatterTags = ((_b2 = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _b2.tags) || [];
              if (typeof frontmatterTags === "string") {
                frontmatterTags.split(/[,\s]+/).filter((tag) => tag.trim() !== "").forEach((tag) => allTags.add(tag));
              } else if (Array.isArray(frontmatterTags)) {
                frontmatterTags.forEach((tag) => {
                  if (typeof tag === "string") {
                    if (tag.includes(" ")) {
                      tag.split(/\s+/).filter((subTag) => subTag.trim() !== "").forEach((subTag) => allTags.add(subTag));
                    } else {
                      allTags.add(tag);
                    }
                  }
                });
              }
              const cacheTags = (fileCache == null ? void 0 : fileCache.tags) || [];
              cacheTags.forEach((tagObj) => {
                const tag = tagObj.tag.startsWith("#") ? tagObj.tag.substring(1) : tagObj.tag;
                allTags.add(tag);
              });
              if (allTags.size > 0) {
                const tagsContainer = contentArea.createDiv("ge-tags-container");
                const containerWidth = tagsContainer.getBoundingClientRect().width;
                const tagWidth = 70;
                const maxTags = Math.floor(containerWidth / tagWidth);
                const displayTags = Array.from(allTags).slice(0, maxTags);
                displayTags.forEach((tag) => {
                  const tagEl = tagsContainer.createEl("span", {
                    cls: "ge-tag",
                    text: tag.startsWith("#") ? tag : `#${tag}`
                  });
                  tagEl.addEventListener("click", (e) => {
                    e.stopPropagation();
                    const tagText = tag.startsWith("#") ? tag.substring(1) : tag;
                    if (this.searchQuery === tagText) {
                      return;
                    }
                    this.searchQuery = tagText;
                    this.searchAllFiles = true;
                    this.searchMediaFiles = false;
                    this.render(true);
                    return false;
                  });
                });
              }
            }
            contentArea.setAttribute("data-loaded", "true");
          }
          const imageArea = fileEl.querySelector(".ge-image-area");
          if (imageArea && !imageArea.hasAttribute("data-loaded")) {
            if (isImageFile(file)) {
              const img = imageArea.createEl("img");
              img.src = this.app.vault.getResourcePath(file);
              imageArea.setAttribute("data-loaded", "true");
            } else if (isVideoFile(file)) {
              if (this.plugin.settings.showVideoThumbnails) {
                const video = imageArea.createEl("video");
                video.src = this.app.vault.getResourcePath(file);
              } else {
                const videoThumb = imageArea.createDiv("ge-video-thumbnail");
                (0, import_obsidian13.setIcon)(videoThumb, "play-circle");
              }
              imageArea.setAttribute("data-loaded", "true");
            } else if (file.extension === "md") {
              if (imageUrl) {
                const img = imageArea.createEl("img");
                img.src = imageUrl;
                imageArea.setAttribute("data-loaded", "true");
              } else {
                imageArea.remove();
              }
            } else {
              imageArea.remove();
            }
          }
          observer2.unobserve(fileEl);
        }
      });
    }, {
      root: container,
      rootMargin: "50px",
      // 預先載入視窗外 50px 的內容
      threshold: 0.1
    });
    if (files.length > 0) {
      const dateDividerMode = this.plugin.settings.dateDividerMode || "none";
      const sortType = this.folderSortType ? this.folderSortType : this.sortType;
      const shouldShowDateDividers = dateDividerMode !== "none" && (sortType.startsWith("mtime-") || sortType.startsWith("ctime-")) && this.sourceMode !== "random-note" && this.sourceMode !== "bookmarks";
      let lastDateString = "";
      for (const file of files) {
        if (shouldShowDateDividers) {
          let timestamp = 0;
          if (sortType.startsWith("mtime-") || sortType.startsWith("ctime-")) {
            const isModifiedTime = sortType.startsWith("mtime-");
            let frontMatterDate = null;
            if (file.extension === "md") {
              const metadata = this.app.metadataCache.getFileCache(file);
              if (metadata == null ? void 0 : metadata.frontmatter) {
                const fieldName = isModifiedTime ? this.plugin.settings.modifiedDateField : this.plugin.settings.createdDateField;
                if (fieldName && metadata.frontmatter[fieldName]) {
                  const dateStr = metadata.frontmatter[fieldName];
                  const date = new Date(dateStr);
                  if (!isNaN(date.getTime())) {
                    frontMatterDate = date;
                  }
                }
              }
            }
            if (frontMatterDate) {
              timestamp = frontMatterDate.getTime();
            } else {
              timestamp = isModifiedTime ? file.stat.mtime : file.stat.ctime;
            }
          }
          const fileDate = new Date(timestamp);
          let currentDateString = "";
          if (dateDividerMode === "year") {
            currentDateString = fileDate.getFullYear().toString();
          } else if (dateDividerMode === "month") {
            const year = fileDate.getFullYear();
            const month = fileDate.getMonth() + 1;
            currentDateString = `${year}-${month.toString().padStart(2, "0")}`;
          } else {
            currentDateString = fileDate.toLocaleDateString();
          }
          if (currentDateString !== lastDateString) {
            lastDateString = currentDateString;
            const dateDivider = container.createDiv("ge-date-divider");
            dateDivider.textContent = currentDateString;
            if (import_obsidian12.Platform.isIosApp) {
              dateDivider.style.width = "calc(100% - 16px)";
            }
          }
        }
        const fileEl = container.createDiv("ge-grid-item");
        this.gridItems.push(fileEl);
        fileEl.dataset.filePath = file.path;
        const contentArea = fileEl.createDiv("ge-content-area");
        const titleContainer = contentArea.createDiv("ge-title-container");
        const extension = file.extension.toLowerCase();
        if (isImageFile(file)) {
          const iconContainer = titleContainer.createDiv("ge-icon-container ge-img");
          (0, import_obsidian13.setIcon)(iconContainer, "image");
        } else if (isVideoFile(file)) {
          const iconContainer = titleContainer.createDiv("ge-icon-container ge-video");
          (0, import_obsidian13.setIcon)(iconContainer, "play-circle");
        } else if (isAudioFile(file)) {
          const iconContainer = titleContainer.createDiv("ge-icon-container ge-audio");
          (0, import_obsidian13.setIcon)(iconContainer, "music");
        } else if (extension === "pdf") {
          const iconContainer = titleContainer.createDiv("ge-icon-container ge-pdf");
          (0, import_obsidian13.setIcon)(iconContainer, "paperclip");
        } else if (extension === "canvas") {
          const iconContainer = titleContainer.createDiv("ge-icon-container ge-canvas");
          (0, import_obsidian13.setIcon)(iconContainer, "layout-dashboard");
        } else if (extension === "md" || extension === "txt") {
          const iconContainer = titleContainer.createDiv("ge-icon-container");
          (0, import_obsidian13.setIcon)(iconContainer, "file-text");
        } else {
          const iconContainer = titleContainer.createDiv("ge-icon-container");
          (0, import_obsidian13.setIcon)(iconContainer, "file");
        }
        const titleEl = titleContainer.createEl("span", { cls: "ge-title", text: file.basename });
        titleEl.setAttribute("title", file.basename);
        fileEl.createDiv("ge-image-area");
        observer.observe(fileEl);
        fileEl.addEventListener("click", (event) => {
          const index = this.gridItems.indexOf(fileEl);
          if (index < 0)
            return;
          if (event.ctrlKey || event.metaKey) {
            if (this.selectedItemIndex !== -1) {
              this.selectItem(index, true);
              this.hasKeyboardFocus = true;
            } else {
              if (isMediaFile(file)) {
                if (isAudioFile(file)) {
                  FloatingAudioPlayer.open(this.app, file);
                } else {
                  this.openMediaFile(file, files);
                }
              } else {
                this.app.workspace.getLeaf(true).openFile(file);
              }
            }
            event.preventDefault();
            return;
          } else if (event.shiftKey) {
            this.handleRangeSelection(index);
            this.hasKeyboardFocus = true;
            event.preventDefault();
            return;
          } else {
            this.selectItem(index);
            this.hasKeyboardFocus = true;
            if (isMediaFile(file)) {
              if (isAudioFile(file)) {
                FloatingAudioPlayer.open(this.app, file);
              } else {
                this.openMediaFile(file, files);
              }
            } else {
              this.app.workspace.getLeaf().openFile(file);
            }
          }
        });
        fileEl.addEventListener("mousedown", (event) => {
          if (event.button === 1) {
            event.preventDefault();
          }
        });
        fileEl.addEventListener("mouseup", (event) => {
          if (event.button === 1) {
            event.preventDefault();
            if (!isMediaFile(file)) {
              this.app.workspace.getLeaf(true).openFile(file);
            }
          }
        });
        if (import_obsidian12.Platform.isDesktop) {
          fileEl.setAttribute("draggable", "true");
          fileEl.addEventListener("dragstart", (event) => {
            var _a2, _b2, _c, _d;
            const index = this.gridItems.indexOf(fileEl);
            if (index >= 0) {
              if (!this.selectedItems.has(index)) {
                this.selectItem(index);
              }
            }
            const selectedFiles = this.getSelectedFiles();
            if (selectedFiles.length > 1) {
              const fileList = selectedFiles.map((f) => {
                const isMedia = isMediaFile(f);
                return isMedia ? `![[${f.path}]]` : `[[${f.path}]]`;
              }).join("\n");
              (_a2 = event.dataTransfer) == null ? void 0 : _a2.setData("text/plain", fileList);
              (_b2 = event.dataTransfer) == null ? void 0 : _b2.setData(
                "application/obsidian-grid-explorer-files",
                JSON.stringify(selectedFiles.map((f) => f.path))
              );
            } else {
              const isMedia = isMediaFile(file);
              const mdLink = isMedia ? `![[${file.path}]]` : `[[${file.path}]]`;
              (_c = event.dataTransfer) == null ? void 0 : _c.setData("text/plain", mdLink);
              (_d = event.dataTransfer) == null ? void 0 : _d.setData(
                "application/obsidian-grid-explorer-files",
                JSON.stringify([file.path])
              );
            }
            event.dataTransfer.effectAllowed = "all";
            fileEl.addClass("ge-dragging");
          });
          fileEl.addEventListener("dragend", () => {
            fileEl.removeClass("ge-dragging");
          });
        }
        fileEl.addEventListener("contextmenu", (event) => {
          event.preventDefault();
          const menu = new import_obsidian12.Menu();
          const index = this.gridItems.indexOf(fileEl);
          if (index >= 0) {
            if (!this.selectedItems.has(index)) {
              this.selectItem(index);
            }
          }
          const selectedFiles = this.getSelectedFiles();
          if (selectedFiles.length > 1) {
            this.app.workspace.trigger("files-menu", menu, selectedFiles);
            const allMdFiles = selectedFiles.every((file2) => file2.extension === "md");
            if (allMdFiles) {
              menu.addItem((item) => {
                item.setTitle(t("set_note_color")).setIcon("palette").onClick(() => {
                  showNoteColorSettingsModal(this.app, this.plugin, selectedFiles);
                });
              });
            }
          } else {
            this.app.workspace.trigger("file-menu", menu, file);
          }
          menu.addItem((item) => {
            var _a2, _b2;
            (_b2 = (_a2 = item.setTitle(t("open_in_new_tab")).setIcon("external-link")).setSection) == null ? void 0 : _b2.call(_a2, "open").onClick(() => {
              if (selectedFiles.length > 1) {
                const documentFiles = selectedFiles.filter((f) => isDocumentFile(f));
                for (const docFile of documentFiles) {
                  this.app.workspace.getLeaf(true).openFile(docFile);
                }
              } else {
                this.app.workspace.getLeaf(true).openFile(file);
              }
            });
          });
          menu.addItem((item) => {
            item.setWarning(true);
            item.setTitle(t("delete_note")).setIcon("trash").onClick(async () => {
              if (selectedFiles.length > 1) {
                for (const f of selectedFiles) {
                  await this.app.fileManager.trashFile(f);
                }
                this.clearSelection();
              } else {
                await this.app.fileManager.trashFile(file);
              }
            });
          });
          menu.showAtMouseEvent(event);
        });
      }
    }
    if (import_obsidian12.Platform.isDesktop) {
      const folderItems = this.containerEl.querySelectorAll(".ge-folder-item");
      folderItems.forEach((folderItem) => {
        folderItem.addEventListener("dragover", (event) => {
          event.preventDefault();
          event.dataTransfer.dropEffect = "move";
          folderItem.addClass("ge-dragover");
        });
        folderItem.addEventListener("dragleave", () => {
          folderItem.removeClass("ge-dragover");
        });
        folderItem.addEventListener("drop", async (event) => {
          var _a2, _b2;
          event.preventDefault();
          folderItem.removeClass("ge-dragover");
          const filesDataString = (_a2 = event.dataTransfer) == null ? void 0 : _a2.getData("application/obsidian-grid-explorer-files");
          if (filesDataString) {
            try {
              const filePaths = JSON.parse(filesDataString);
              const folderPath2 = folderItem.dataset.folderPath;
              if (!folderPath2)
                return;
              const folder2 = this.app.vault.getAbstractFileByPath(folderPath2);
              if (!(folder2 instanceof import_obsidian12.TFolder))
                return;
              for (const path of filePaths) {
                const file2 = this.app.vault.getAbstractFileByPath(path);
                if (file2 instanceof import_obsidian12.TFile) {
                  try {
                    const newPath = `${folderPath2}/${file2.name}`;
                    await this.app.fileManager.renameFile(file2, newPath);
                  } catch (error) {
                    console.error(`An error occurred while moving the file ${file2.path}:`, error);
                  }
                }
              }
              this.render();
              return;
            } catch (error) {
              console.error("Error parsing dragged files data:", error);
            }
          }
          const filePath = (_b2 = event.dataTransfer) == null ? void 0 : _b2.getData("text/plain");
          if (!filePath)
            return;
          const cleanedFilePath = filePath.replace(/!?\[\[(.*?)\]\]/, "$1");
          const folderPath = folderItem.dataset.folderPath;
          if (!folderPath)
            return;
          const file = this.app.vault.getAbstractFileByPath(cleanedFilePath);
          const folder = this.app.vault.getAbstractFileByPath(folderPath);
          if (file instanceof import_obsidian12.TFile && folder instanceof import_obsidian12.TFolder) {
            try {
              const newPath = `${folderPath}/${file.name}`;
              await this.app.fileManager.renameFile(file, newPath);
              this.render();
            } catch (error) {
              console.error("An error occurred while moving the file:", error);
            }
          }
        });
      });
    }
    if (this.plugin.statusBarItem) {
      this.plugin.statusBarItem.setText(`${files.length} ${t("files")}`);
    }
  }
  // 處理鍵盤導航
  handleKeyDown(event) {
    if (!this.keyboardNavigationEnabled || this.gridItems.length === 0)
      return;
    const container = this.containerEl.children[1];
    const containerWidth = container.clientWidth;
    const itemWidth = this.plugin.settings.gridItemWidth + 20;
    const itemsPerRow = Math.max(1, Math.floor(containerWidth / itemWidth));
    let newIndex = this.selectedItemIndex;
    if (this.selectedItemIndex === -1 && ["ArrowRight", "ArrowLeft", "ArrowDown", "ArrowUp", "Home", "End"].includes(event.key)) {
      this.hasKeyboardFocus = true;
      this.selectItem(0);
      event.preventDefault();
      return;
    }
    switch (event.key) {
      case "ArrowRight":
        if (event.altKey) {
          if (this.selectedItemIndex >= 0 && this.selectedItemIndex < this.gridItems.length) {
            this.gridItems[this.selectedItemIndex].click();
          }
        }
        newIndex = Math.min(this.gridItems.length - 1, this.selectedItemIndex + 1);
        this.hasKeyboardFocus = true;
        event.preventDefault();
        break;
      case "ArrowLeft":
        if (event.altKey) {
          if (this.sourceMode === "folder" && this.sourcePath && this.sourcePath !== "/") {
            const parentPath = this.sourcePath.split("/").slice(0, -1).join("/") || "/";
            this.setSource("folder", parentPath, true);
            this.clearSelection();
            event.preventDefault();
          }
          break;
        }
        newIndex = Math.max(0, this.selectedItemIndex - 1);
        this.hasKeyboardFocus = true;
        event.preventDefault();
        break;
      case "ArrowDown":
        newIndex = Math.min(this.gridItems.length - 1, this.selectedItemIndex + itemsPerRow);
        this.hasKeyboardFocus = true;
        event.preventDefault();
        break;
      case "ArrowUp":
        if (event.altKey) {
          if (this.sourceMode === "folder" && this.sourcePath && this.sourcePath !== "/") {
            const parentPath = this.sourcePath.split("/").slice(0, -1).join("/") || "/";
            this.setSource("folder", parentPath, true);
            this.clearSelection();
            event.preventDefault();
          }
          break;
        }
        newIndex = Math.max(0, this.selectedItemIndex - itemsPerRow);
        this.hasKeyboardFocus = true;
        event.preventDefault();
        break;
      case "Home":
        newIndex = 0;
        this.hasKeyboardFocus = true;
        event.preventDefault();
        break;
      case "End":
        newIndex = this.gridItems.length - 1;
        this.hasKeyboardFocus = true;
        event.preventDefault();
        break;
      case "Enter":
        if (this.selectedItemIndex >= 0 && this.selectedItemIndex < this.gridItems.length) {
          this.gridItems[this.selectedItemIndex].click();
        }
        this.clearSelection();
        event.preventDefault();
        break;
      case "Backspace":
        if (this.sourceMode === "folder" && this.sourcePath && this.sourcePath !== "/") {
          const parentPath = this.sourcePath.split("/").slice(0, -1).join("/") || "/";
          this.setSource("folder", parentPath, true);
          this.clearSelection();
          event.preventDefault();
        }
        break;
      case "Escape":
        if (this.selectedItemIndex >= 0) {
          this.hasKeyboardFocus = false;
          this.clearSelection();
          event.preventDefault();
        }
        break;
    }
    if (newIndex !== this.selectedItemIndex) {
      this.selectItem(newIndex);
    }
  }
  // 清除選中狀態
  clearSelection() {
    this.gridItems.forEach((item) => {
      item.removeClass("ge-selected-item");
    });
    this.selectedItemIndex = -1;
    this.selectedItems.clear();
  }
  // 選中指定索引的項目
  selectItem(index, multiSelect = false) {
    if (!multiSelect) {
      this.gridItems.forEach((item) => {
        item.removeClass("ge-selected-item");
      });
      this.selectedItems.clear();
    }
    if (index >= 0 && index < this.gridItems.length) {
      this.selectedItemIndex = index;
      const selectedItem = this.gridItems[index];
      if (multiSelect && this.selectedItems.has(index)) {
        selectedItem.removeClass("ge-selected-item");
        this.selectedItems.delete(index);
        if (this.selectedItems.size === 0) {
          this.selectedItemIndex = -1;
        } else {
          this.selectedItemIndex = Array.from(this.selectedItems).pop() || -1;
        }
      } else {
        selectedItem.addClass("ge-selected-item");
        this.selectedItems.add(index);
      }
      selectedItem.scrollIntoView({
        behavior: "smooth",
        block: "nearest"
      });
    }
  }
  // 處理範圍選擇（Shift 鍵）
  handleRangeSelection(index) {
    if (this.selectedItemIndex === -1) {
      this.selectItem(index);
      return;
    }
    const startIndex = Math.min(this.selectedItemIndex, index);
    const endIndex = Math.max(this.selectedItemIndex, index);
    this.gridItems.forEach((item) => {
      item.removeClass("ge-selected-item");
    });
    this.selectedItems.clear();
    for (let i = startIndex; i <= endIndex; i++) {
      this.gridItems[i].addClass("ge-selected-item");
      this.selectedItems.add(i);
    }
    this.selectedItemIndex = index;
  }
  // 獲取所有選中項目的檔案
  getSelectedFiles() {
    const files = [];
    this.selectedItems.forEach((index) => {
      const fileEl = this.gridItems[index];
      const filePath = fileEl.dataset.filePath;
      if (filePath) {
        const file = this.app.vault.getAbstractFileByPath(filePath);
        if (file instanceof import_obsidian12.TFile) {
          files.push(file);
        }
      }
    });
    return files;
  }
  // 開啟媒體檔案
  openMediaFile(file, mediaFiles) {
    const getMediaFilesPromise = mediaFiles ? Promise.resolve(mediaFiles.filter((f) => isMediaFile(f))) : getFiles(this).then((allFiles) => allFiles.filter((f) => isMediaFile(f)));
    getMediaFilesPromise.then((filteredMediaFiles) => {
      const currentIndex = filteredMediaFiles.findIndex((f) => f.path === file.path);
      if (currentIndex === -1)
        return;
      const mediaModal = new MediaModal(this.app, file, filteredMediaFiles, this);
      mediaModal.open();
    });
  }
  // 保存視圖狀態
  getState() {
    return {
      type: "grid-view",
      state: {
        sourceMode: this.sourceMode,
        sourcePath: this.sourcePath,
        sortType: this.sortType,
        folderSortType: this.folderSortType,
        searchQuery: this.searchQuery,
        searchAllFiles: this.searchAllFiles,
        searchMediaFiles: this.searchMediaFiles,
        randomNoteIncludeMedia: this.randomNoteIncludeMedia
      }
    };
  }
  // 讀取視圖狀態
  async setState(state) {
    var _a, _b, _c;
    if (state.state) {
      this.sourceMode = state.state.sourceMode || "";
      this.sourcePath = state.state.sourcePath || null;
      this.sortType = state.state.sortType || "mtime-desc";
      this.folderSortType = state.state.folderSortType || "";
      this.searchQuery = state.state.searchQuery || "";
      this.searchAllFiles = (_a = state.state.searchAllFiles) != null ? _a : true;
      this.searchMediaFiles = (_b = state.state.searchMediaFiles) != null ? _b : false;
      this.randomNoteIncludeMedia = (_c = state.state.randomNoteIncludeMedia) != null ? _c : false;
      this.render();
    }
  }
  // 禁用鍵盤導航
  disableKeyboardNavigation() {
    this.keyboardNavigationEnabled = false;
  }
  // 啟用鍵盤導航
  enableKeyboardNavigation() {
    this.keyboardNavigationEnabled = true;
  }
};

// src/settings.ts
var import_obsidian14 = require("obsidian");
var DEFAULT_SETTINGS = {
  ignoredFolders: [],
  ignoredFolderPatterns: [],
  // 預設以字串忽略的資料夾模式
  defaultSortType: "mtime-desc",
  // 預設排序模式：修改時間倒序
  gridItemWidth: 300,
  // 網格項目寬度，預設 300
  gridItemHeight: 0,
  // 網格項目高度，預設 0
  imageAreaWidth: 100,
  // 圖片區域寬度，預設 100
  imageAreaHeight: 100,
  // 圖片區域高度，預設 100
  titleFontSize: 1,
  // 筆記標題的字型大小，預設 1.0
  summaryLength: 100,
  // 筆記摘要的字數，預設 100
  enableFileWatcher: true,
  // 預設啟用檔案監控
  showMediaFiles: true,
  // 預設顯示圖片和影片
  showVideoThumbnails: false,
  // 預設不顯示影片縮圖
  defaultOpenLocation: "tab",
  // 預設開啟位置：新分頁
  showParentFolderItem: false,
  // 預設不顯示"返回上级文件夹"選項
  reuseExistingLeaf: false,
  // 預設不重用現有的網格視圖
  showBookmarksMode: true,
  // 預設顯示書籤模式
  showSearchMode: true,
  // 預設顯示搜尋結果模式
  showBacklinksMode: true,
  // 預設顯示反向連結模式
  showAllFilesMode: false,
  // 預設不顯示所有檔案模式
  showRandomNoteMode: false,
  // 預設不顯示隨機筆記模式
  showRecentFilesMode: true,
  // 預設不顯示最近筆記模式
  recentFilesCount: 30,
  // 預設最近筆記模式顯示的筆數
  randomNoteCount: 10,
  // 預設隨機筆記模式顯示的筆數
  customDocumentExtensions: "",
  // 自訂文件副檔名（用逗號分隔）
  recentSources: [],
  // 預設最近的瀏覽記錄
  modifiedDateField: "",
  createdDateField: "",
  showNoteTags: false,
  // 預設不顯示筆記標籤
  dateDividerMode: "none"
  // 預設不使用日期分隔器
};
var GridExplorerSettingTab = class extends import_obsidian14.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian14.Setting(containerEl).setName(t("reset_to_default")).setDesc(t("reset_to_default_desc")).addButton((button) => button.setButtonText(t("reset")).onClick(async () => {
      this.plugin.settings = { ...DEFAULT_SETTINGS };
      await this.plugin.saveSettings();
      this.display();
      new import_obsidian14.Notice(t("settings_reset_notice"));
    }));
    containerEl.createEl("h3", { text: t("display_mode_settings") });
    new import_obsidian14.Setting(containerEl).setName(t("show_bookmarks_mode")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showBookmarksMode).onChange(async (value) => {
        this.plugin.settings.showBookmarksMode = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("show_search_mode")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showSearchMode).onChange(async (value) => {
        this.plugin.settings.showSearchMode = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("show_backlinks_mode")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showBacklinksMode).onChange(async (value) => {
        this.plugin.settings.showBacklinksMode = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("show_all_files_mode")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showAllFilesMode).onChange(async (value) => {
        this.plugin.settings.showAllFilesMode = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("show_recent_files_mode")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showRecentFilesMode).onChange(async (value) => {
        this.plugin.settings.showRecentFilesMode = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("recent_files_count")).addText((text) => {
      text.setValue(this.plugin.settings.recentFilesCount.toString()).onChange(async (value) => {
        this.plugin.settings.recentFilesCount = parseInt(value);
        await this.plugin.saveSettings(false);
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("show_random_note_mode")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showRandomNoteMode).onChange(async (value) => {
        this.plugin.settings.showRandomNoteMode = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("random_note_count")).addText((text) => {
      text.setValue(this.plugin.settings.randomNoteCount.toString()).onChange(async (value) => {
        this.plugin.settings.randomNoteCount = parseInt(value);
        await this.plugin.saveSettings(false);
      });
    });
    containerEl.createEl("h3", { text: t("media_files_settings") });
    new import_obsidian14.Setting(containerEl).setName(t("show_media_files")).setDesc(t("show_media_files_desc")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showMediaFiles).onChange(async (value) => {
        this.plugin.settings.showMediaFiles = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("show_video_thumbnails")).setDesc(t("show_video_thumbnails_desc")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showVideoThumbnails).onChange(async (value) => {
        this.plugin.settings.showVideoThumbnails = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: t("grid_view_settings") });
    new import_obsidian14.Setting(containerEl).setName(t("reuse_existing_leaf")).setDesc(t("reuse_existing_leaf_desc")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.reuseExistingLeaf).onChange(async (value) => {
        this.plugin.settings.reuseExistingLeaf = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("default_open_location")).setDesc(t("default_open_location_desc")).addDropdown((dropdown) => {
      dropdown.addOption("tab", t("open_in_new_tab")).addOption("left", t("open_in_left_sidebar")).addOption("right", t("open_in_right_sidebar")).setValue(this.plugin.settings.defaultOpenLocation).onChange(async (value) => {
        this.plugin.settings.defaultOpenLocation = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("default_sort_type")).setDesc(t("default_sort_type_desc")).addDropdown((dropdown) => {
      dropdown.addOption("name-asc", t("sort_name_asc")).addOption("name-desc", t("sort_name_desc")).addOption("mtime-desc", t("sort_mtime_desc")).addOption("mtime-asc", t("sort_mtime_asc")).addOption("ctime-desc", t("sort_ctime_desc")).addOption("ctime-asc", t("sort_ctime_asc")).addOption("random", t("sort_random")).setValue(this.plugin.settings.defaultSortType).onChange(async (value) => {
        this.plugin.settings.defaultSortType = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("modified_date_field")).setDesc(t("modified_date_field_desc")).addText((text) => text.setPlaceholder("modified_date").setValue(this.plugin.settings.modifiedDateField).onChange(async (value) => {
      this.plugin.settings.modifiedDateField = value;
      await this.plugin.saveSettings(false);
    }));
    new import_obsidian14.Setting(containerEl).setName(t("created_date_field")).setDesc(t("created_date_field_desc")).addText((text) => text.setPlaceholder("created_date").setValue(this.plugin.settings.createdDateField).onChange(async (value) => {
      this.plugin.settings.createdDateField = value;
      await this.plugin.saveSettings(false);
    }));
    new import_obsidian14.Setting(containerEl).setName(t("date_divider_mode")).setDesc(t("date_divider_mode_desc")).addDropdown((dropdown) => {
      dropdown.addOption("none", t("date_divider_mode_none")).addOption("year", t("date_divider_mode_year")).addOption("month", t("date_divider_mode_month")).addOption("day", t("date_divider_mode_day")).setValue(this.plugin.settings.dateDividerMode).onChange(async (value) => {
        this.plugin.settings.dateDividerMode = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("enable_file_watcher")).setDesc(t("enable_file_watcher_desc")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.enableFileWatcher).onChange(async (value) => {
        this.plugin.settings.enableFileWatcher = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("custom_document_extensions")).setDesc(t("custom_document_extensions_desc")).addText((text) => {
      text.setPlaceholder(t("custom_document_extensions_placeholder")).setValue(this.plugin.settings.customDocumentExtensions).onChange(async (value) => {
        this.plugin.settings.customDocumentExtensions = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("show_parent_folder_item")).setDesc(t("show_parent_folder_item_desc")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showParentFolderItem).onChange(async (value) => {
        this.plugin.settings.showParentFolderItem = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("show_note_tags")).setDesc(t("show_note_tags_desc")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showNoteTags).onChange(async (value) => {
        this.plugin.settings.showNoteTags = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("grid_item_width")).setDesc(t("grid_item_width_desc")).addSlider((slider) => {
      slider.setLimits(200, 600, 10).setValue(this.plugin.settings.gridItemWidth).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.gridItemWidth = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("grid_item_height")).setDesc(t("grid_item_height_desc")).addSlider((slider) => {
      slider.setLimits(0, 600, 10).setValue(this.plugin.settings.gridItemHeight).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.gridItemHeight = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("image_area_width")).setDesc(t("image_area_width_desc")).addSlider((slider) => {
      slider.setLimits(50, 300, 10).setValue(this.plugin.settings.imageAreaWidth).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.imageAreaWidth = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("image_area_height")).setDesc(t("image_area_height_desc")).addSlider((slider) => {
      slider.setLimits(50, 300, 10).setValue(this.plugin.settings.imageAreaHeight).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.imageAreaHeight = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("title_font_size")).setDesc(t("title_font_size_desc")).addSlider((slider) => {
      slider.setLimits(0.8, 1.5, 0.05).setValue(this.plugin.settings.titleFontSize).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.titleFontSize = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName(t("summary_length")).setDesc(t("summary_length_desc")).addSlider((slider) => {
      slider.setLimits(50, 600, 25).setValue(this.plugin.settings.summaryLength).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.summaryLength = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: t("ignored_folders_settings") });
    const ignoredFoldersContainer = containerEl.createDiv("ignored-folders-container");
    new import_obsidian14.Setting(containerEl).setName(t("ignored_folders")).setDesc(t("ignored_folders_desc")).setHeading();
    new import_obsidian14.Setting(ignoredFoldersContainer).setName(t("add_ignored_folder")).addDropdown((dropdown) => {
      const folders = this.app.vault.getAllFolders().filter((folder) => folder.path !== "/").sort((a, b) => a.path.localeCompare(b.path));
      dropdown.addOption("", t("select_folders"));
      folders.forEach((folder) => {
        const isIgnored = this.plugin.settings.ignoredFolders.some(
          (ignoredPath) => folder.path === ignoredPath || folder.path.startsWith(ignoredPath + "/")
        );
        if (!isIgnored) {
          dropdown.addOption(folder.path, folder.path);
        }
      });
      dropdown.onChange(async (value) => {
        if (value) {
          this.plugin.settings.ignoredFolders.push(value);
          await this.plugin.saveSettings();
          this.renderIgnoredFoldersList(ignoredFoldersList);
          dropdown.setValue("");
          this.display();
        }
      });
    });
    const ignoredFoldersList = ignoredFoldersContainer.createDiv("ge-ignored-folders-list");
    this.renderIgnoredFoldersList(ignoredFoldersList);
    containerEl.appendChild(ignoredFoldersContainer);
    const ignoredFolderPatternsContainer = containerEl.createDiv("ignored-folder-patterns-container");
    new import_obsidian14.Setting(containerEl).setName(t("ignored_folder_patterns")).setDesc(t("ignored_folder_patterns_desc")).setHeading();
    const patternSetting = new import_obsidian14.Setting(ignoredFolderPatternsContainer).setName(t("add_ignored_folder_pattern")).addText((text) => {
      text.setPlaceholder(t("ignored_folder_pattern_placeholder")).onChange(() => {
      });
      return text;
    });
    patternSetting.addButton((button) => {
      button.setButtonText(t("add")).setCta().onClick(async () => {
        const inputEl = patternSetting.controlEl.querySelector("input");
        const pattern = inputEl.value.trim();
        if (pattern && !this.plugin.settings.ignoredFolderPatterns.includes(pattern)) {
          this.plugin.settings.ignoredFolderPatterns.push(pattern);
          await this.plugin.saveSettings();
          this.renderIgnoredFolderPatternsList(ignoredFolderPatternsList);
          inputEl.value = "";
        }
      });
    });
    const ignoredFolderPatternsList = ignoredFolderPatternsContainer.createDiv("ge-ignored-folder-patterns-list");
    this.renderIgnoredFolderPatternsList(ignoredFolderPatternsList);
    containerEl.appendChild(ignoredFolderPatternsContainer);
  }
  // 渲染已忽略的資料夾列表
  renderIgnoredFoldersList(containerEl) {
    containerEl.empty();
    if (this.plugin.settings.ignoredFolders.length === 0) {
      containerEl.createEl("p", { text: t("no_ignored_folders") });
      return;
    }
    const list = containerEl.createEl("ul", { cls: "ge-ignored-folders-list" });
    this.plugin.settings.ignoredFolders.forEach((folder) => {
      const item = list.createEl("li", { cls: "ge-ignored-folder-item" });
      item.createSpan({ text: folder, cls: "ge-ignored-folder-path" });
      const removeButton = item.createEl("button", {
        cls: "ge-ignored-folder-remove",
        text: t("remove")
      });
      removeButton.addEventListener("click", async () => {
        this.plugin.settings.ignoredFolders = this.plugin.settings.ignoredFolders.filter((f) => f !== folder);
        await this.plugin.saveSettings();
        this.renderIgnoredFoldersList(containerEl);
        this.display();
      });
    });
  }
  // 渲染已忽略的資料夾模式列表
  renderIgnoredFolderPatternsList(containerEl) {
    containerEl.empty();
    if (this.plugin.settings.ignoredFolderPatterns.length === 0) {
      containerEl.createEl("p", { text: t("no_ignored_folder_patterns") });
      return;
    }
    const list = containerEl.createEl("ul", { cls: "ge-ignored-folders-list" });
    this.plugin.settings.ignoredFolderPatterns.forEach((pattern) => {
      const item = list.createEl("li", { cls: "ge-ignored-folder-item" });
      item.createSpan({ text: pattern, cls: "ge-ignored-folder-path" });
      const removeButton = item.createEl("button", {
        cls: "ge-ignored-folder-remove",
        text: t("remove")
      });
      removeButton.addEventListener("click", async () => {
        this.plugin.settings.ignoredFolderPatterns = this.plugin.settings.ignoredFolderPatterns.filter((p) => p !== pattern);
        await this.plugin.saveSettings();
        this.renderIgnoredFolderPatternsList(containerEl);
      });
    });
  }
};

// main.ts
var GridExplorerPlugin = class extends import_obsidian15.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      "grid-view",
      (leaf) => new GridView(leaf, this)
    );
    this.addSettingTab(new GridExplorerSettingTab(this.app, this));
    this.addCommand({
      id: "open-grid-view",
      name: t("open_grid_view"),
      callback: () => {
        showFolderSelectionModal(this.app, this);
      }
    });
    this.addCommand({
      id: "view-current-note-in-grid-view",
      name: t("open_note_in_grid_view"),
      callback: () => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile) {
          this.openNoteInFolder(activeFile);
        } else {
          this.openNoteInFolder(this.app.vault.getRoot());
        }
      }
    });
    this.addCommand({
      id: "view-backlinks-in-grid-view",
      name: t("open_backlinks_in_grid_view"),
      callback: () => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile) {
          this.activateView("backlinks");
        } else {
          this.openNoteInFolder(this.app.vault.getRoot());
        }
      }
    });
    this.addCommand({
      id: "view-recent-files-in-grid-view",
      name: t("open_recent_files_in_grid_view"),
      callback: () => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile) {
          this.openNoteInRecentFiles(activeFile);
        } else {
          this.openNoteInFolder(this.app.vault.getRoot());
        }
      }
    });
    this.addRibbonIcon("grid", t("open_grid_view"), () => {
      showFolderSelectionModal(this.app, this);
    });
    this.statusBarItem = this.addStatusBarItem();
    this.statusBarItem.onClickEvent(() => {
      this.activateView();
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian15.TFolder) {
          menu.addItem((item) => {
            var _a, _b;
            (_b = (_a = item.setTitle(t("open_in_grid_view")).setIcon("grid")).setSection) == null ? void 0 : _b.call(_a, "open").onClick(() => {
              this.openNoteInFolder(file);
            });
          });
        }
        if (file instanceof import_obsidian15.TFile) {
          menu.addItem((item) => {
            var _a;
            item.setTitle(t("open_in_grid_view"));
            item.setIcon("grid");
            (_a = item.setSection) == null ? void 0 : _a.call(item, "open");
            const ogSubmenu = item.setSubmenu();
            ogSubmenu.addItem((item2) => {
              item2.setTitle(t("open_note_in_grid_view")).setIcon("folder").onClick(() => {
                this.openNoteInFolder(file);
              });
            });
            if (this.settings.showBacklinksMode) {
              ogSubmenu.addItem((item2) => {
                item2.setTitle(t("open_backlinks_in_grid_view")).setIcon("paperclip").onClick(() => {
                  this.app.workspace.getLeaf().openFile(file);
                  setTimeout(() => {
                    this.activateView("backlinks");
                  }, 100);
                });
              });
            }
            if (this.settings.showRecentFilesMode && file instanceof import_obsidian15.TFile) {
              ogSubmenu.addItem((item2) => {
                item2.setTitle(t("open_recent_files_in_grid_view")).setIcon("calendar-days").onClick(() => {
                  this.openNoteInRecentFiles(file);
                });
              });
            }
          });
          menu.addItem((item) => {
            item.setTitle(t("set_note_color")).setIcon("palette").onClick(() => {
              showNoteColorSettingsModal(this.app, this, file);
            });
          });
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor) => {
        if (editor.somethingSelected()) {
          const selectedText = editor.getSelection();
          const truncatedText = selectedText.length > 20 ? selectedText.substring(0, 20) + "..." : selectedText;
          const menuItemTitle = t("search_selection_in_grid_view").replace("...", `\u300C${truncatedText}\u300D`);
          menu.addItem((item) => {
            var _a, _b;
            (_b = (_a = item.setTitle(menuItemTitle).setIcon("search")).setSection) == null ? void 0 : _b.call(_a, "view").onClick(async () => {
              const selectedText2 = editor.getSelection();
              const view = await this.activateView("folder", "/");
              if (view instanceof GridView) {
                view.searchQuery = selectedText2;
                view.searchAllFiles = true;
                view.searchMediaFiles = false;
                view.render(true);
              }
            });
          });
        }
      })
    );
  }
  async openNoteInRecentFiles(file) {
    const view = await this.activateView("recent-files");
    if (file instanceof import_obsidian15.TFile) {
      setTimeout(() => {
        const gridContainer = view.containerEl.querySelector(".ge-grid-container");
        if (!gridContainer)
          return;
        const gridItem = Array.from(gridContainer.querySelectorAll(".ge-grid-item")).find(
          (item) => item.dataset.filePath === file.path
        );
        if (gridItem) {
          gridItem.scrollIntoView({ behavior: "smooth", block: "center" });
          const itemIndex = view.gridItems.indexOf(gridItem);
          if (itemIndex >= 0) {
            view.selectItem(itemIndex);
          }
        }
      }, 100);
    }
  }
  async openNoteInFolder(file = this.app.vault.getRoot()) {
    var _a;
    const folderPath = file ? file instanceof import_obsidian15.TFile ? (_a = file.parent) == null ? void 0 : _a.path : file.path : "/";
    const view = await this.activateView("folder", folderPath);
    if (file instanceof import_obsidian15.TFile) {
      setTimeout(() => {
        const gridContainer = view.containerEl.querySelector(".ge-grid-container");
        if (!gridContainer)
          return;
        const gridItem = Array.from(gridContainer.querySelectorAll(".ge-grid-item")).find(
          (item) => item.dataset.filePath === file.path
        );
        if (gridItem) {
          gridItem.scrollIntoView({ behavior: "smooth", block: "center" });
          const itemIndex = view.gridItems.indexOf(gridItem);
          if (itemIndex >= 0) {
            view.selectItem(itemIndex);
          }
        }
      }, 100);
    }
  }
  async activateView(mode = "bookmarks", path = "") {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType("grid-view");
    if (this.settings.reuseExistingLeaf && leaves.length > 0) {
      leaf = leaves[0];
    } else {
      switch (this.settings.defaultOpenLocation) {
        case "left":
          leaf = workspace.getLeftLeaf(false);
          break;
        case "right":
          leaf = workspace.getRightLeaf(false);
          break;
        case "tab":
        default:
          leaf = workspace.getLeaf("tab");
          break;
      }
    }
    if (!leaf) {
      leaf = workspace.getLeaf("tab");
    }
    await leaf.setViewState({ type: "grid-view", active: true });
    if (leaf.view instanceof GridView) {
      await leaf.view.setSource(mode, path);
    }
    workspace.revealLeaf(leaf);
    return leaf.view;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    updateCustomDocumentExtensions(this.settings);
  }
  async saveSettings(update = true) {
    await this.saveData(this.settings);
    updateCustomDocumentExtensions(this.settings);
    if (update) {
      const leaves = this.app.workspace.getLeavesOfType("grid-view");
      leaves.forEach((leaf) => {
        if (leaf.view instanceof GridView) {
          leaf.view.render();
        }
      });
    }
  }
};


/* nosourcemap */
// <auto-generated />
using System;
using EnglishApp.Infrastructure.Implementations.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EnglishApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EnglishApp.Domain.Entities.ReviewHistory", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("NewConfidenceNumber")
                        .HasColumnType("integer");

                    b.Property<int>("OldConfidenceNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WordId")
                        .HasColumnType("integer");

                    b.HasKey("ReviewId");

                    b.HasIndex("WordId");

                    b.ToTable("ReviewHistories");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("BackupEmail")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserTypeId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.UserDictionary", b =>
                {
                    b.Property<int>("DictionaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DictionaryId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("DictionaryDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DictionaryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DictionaryId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("UserDictionaries");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.UserSession", b =>
                {
                    b.Property<int>("UserSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserSessionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserSessionId");

                    b.HasIndex("UserId", "DeviceId")
                        .IsUnique();

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserTypeId"));

                    b.Property<string>("UserTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.VerificationCode", b =>
                {
                    b.Property<int>("VerificationCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VerificationCodeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CodeType")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("VerificationCodeId");

                    b.HasIndex("UserId", "DeviceId")
                        .IsUnique();

                    b.ToTable("VerificationCodes");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.Word", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WordId"));

                    b.Property<int?>("ConfidenceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DictionaryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("NextReview")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Pronunciation")
                        .HasColumnType("text");

                    b.Property<string>("Sources")
                        .HasColumnType("text");

                    b.Property<string>("WordText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("lastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("WordId");

                    b.HasIndex("ConfidenceId");

                    b.HasIndex("DictionaryId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.WordConfidence", b =>
                {
                    b.Property<int>("ConfidenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConfidenceId"));

                    b.Property<int>("ConfidenceNumber")
                        .HasColumnType("integer");

                    b.Property<int>("ConfidencePeriod")
                        .HasColumnType("integer");

                    b.Property<int>("DictionaryId")
                        .HasColumnType("integer");

                    b.HasKey("ConfidenceId");

                    b.HasIndex("DictionaryId");

                    b.ToTable("WordConfidences");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.WordDetail", b =>
                {
                    b.Property<int>("WordDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WordDetailId"));

                    b.Property<string>("Arabic")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Example")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("WordId")
                        .HasColumnType("integer");

                    b.Property<string>("WordImage")
                        .HasColumnType("text");

                    b.HasKey("WordDetailId");

                    b.HasIndex("WordId");

                    b.ToTable("WordDetails");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.ReviewHistory", b =>
                {
                    b.HasOne("EnglishApp.Domain.Entities.Word", "DictionaryWord")
                        .WithMany("DictionaryReviewHistories")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictionaryWord");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.User", b =>
                {
                    b.HasOne("EnglishApp.Domain.Entities.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.UserDictionary", b =>
                {
                    b.HasOne("EnglishApp.Domain.Entities.User", "CreatedByUser")
                        .WithMany("Dictionaries")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("EnglishApp.Domain.Entities.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.VerificationCode", b =>
                {
                    b.HasOne("EnglishApp.Domain.Entities.User", "User")
                        .WithMany("VerificationCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.Word", b =>
                {
                    b.HasOne("EnglishApp.Domain.Entities.WordConfidence", "DictionaryWordConfidence")
                        .WithMany("DictionaryWords")
                        .HasForeignKey("ConfidenceId");

                    b.HasOne("EnglishApp.Domain.Entities.UserDictionary", "Dictionary")
                        .WithMany("DictionaryWords")
                        .HasForeignKey("DictionaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dictionary");

                    b.Navigation("DictionaryWordConfidence");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.WordConfidence", b =>
                {
                    b.HasOne("EnglishApp.Domain.Entities.UserDictionary", "Dictionary")
                        .WithMany("DictionaryWordConfidences")
                        .HasForeignKey("DictionaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dictionary");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.WordDetail", b =>
                {
                    b.HasOne("EnglishApp.Domain.Entities.Word", "DictionaryWord")
                        .WithMany("DictionaryWordDetails")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictionaryWord");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Dictionaries");

                    b.Navigation("UserSessions");

                    b.Navigation("VerificationCodes");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.UserDictionary", b =>
                {
                    b.Navigation("DictionaryWordConfidences");

                    b.Navigation("DictionaryWords");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.UserType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.Word", b =>
                {
                    b.Navigation("DictionaryReviewHistories");

                    b.Navigation("DictionaryWordDetails");
                });

            modelBuilder.Entity("EnglishApp.Domain.Entities.WordConfidence", b =>
                {
                    b.Navigation("DictionaryWords");
                });
#pragma warning restore 612, 618
        }
    }
}
